{
  "version": 3,
  "sources": ["../../@xyflow/svelte/dist/lib/components/Handle/Handle.svelte", "../../@xyflow/svelte/dist/lib/components/nodes/DefaultNode.svelte", "../../@xyflow/svelte/dist/lib/components/nodes/InputNode.svelte", "../../@xyflow/svelte/dist/lib/components/nodes/OutputNode.svelte", "../../@xyflow/svelte/dist/lib/components/nodes/GroupNode.svelte", "../../@xyflow/svelte/dist/lib/actions/portal/portal.svelte.js", "../../@xyflow/svelte/dist/lib/actions/portal/utils.svelte.js", "../../@xyflow/svelte/dist/lib/utils/index.js", "../../@xyflow/svelte/dist/lib/components/EdgeLabel/EdgeLabel.svelte", "../../@xyflow/svelte/dist/lib/components/edges/BaseEdge.svelte", "../../@xyflow/svelte/dist/lib/components/edges/BezierEdge.svelte", "../../@xyflow/svelte/dist/lib/components/edges/SmoothStepEdge.svelte", "../../@xyflow/svelte/dist/lib/components/edges/SmoothStepEdgeInternal.svelte", "../../@xyflow/svelte/dist/lib/components/edges/StraightEdge.svelte", "../../@xyflow/svelte/dist/lib/components/edges/StraightEdgeInternal.svelte", "../../@xyflow/svelte/dist/lib/components/edges/StepEdge.svelte", "../../@xyflow/svelte/dist/lib/components/edges/StepEdgeInternal.svelte", "../../@xyflow/svelte/dist/lib/store/visibleElements.js", "../../@xyflow/svelte/dist/lib/store/initial-store.svelte.js", "../../@xyflow/svelte/dist/lib/hooks/derivedWarning.svelte.js", "../../@xyflow/svelte/dist/lib/hooks/useStore.js", "../../@xyflow/svelte/dist/lib/store/index.js", "../../@xyflow/svelte/dist/lib/actions/zoom/index.js", "../../@xyflow/svelte/dist/lib/container/Zoom/Zoom.svelte", "../../@xyflow/svelte/dist/lib/container/Pane/Pane.svelte", "../../@xyflow/svelte/dist/lib/container/Viewport/Viewport.svelte", "../../@xyflow/svelte/dist/lib/actions/drag/index.js", "../../@xyflow/svelte/dist/lib/components/A11yDescriptions/A11yDescriptions.svelte", "../../@xyflow/svelte/dist/lib/components/A11yDescriptions/index.js", "../../@xyflow/svelte/dist/lib/components/NodeWrapper/NodeWrapper.svelte", "../../@xyflow/svelte/dist/lib/container/NodeRenderer/NodeRenderer.svelte", "../../@xyflow/svelte/dist/lib/components/EdgeWrapper/EdgeWrapper.svelte", "../../@xyflow/svelte/dist/lib/container/EdgeRenderer/MarkerDefinition/MarkerDefinition.svelte", "../../@xyflow/svelte/dist/lib/container/EdgeRenderer/MarkerDefinition/Marker.svelte", "../../@xyflow/svelte/dist/lib/container/EdgeRenderer/EdgeRenderer.svelte", "../../@xyflow/svelte/dist/lib/components/Selection/Selection.svelte", "../../@xyflow/svelte/dist/lib/components/NodeSelection/NodeSelection.svelte", "../../@svelte-put/shortcut/src/shortcut.js", "../../@xyflow/svelte/dist/lib/hooks/useSvelteFlow.svelte.js", "../../@xyflow/svelte/dist/lib/components/KeyHandler/KeyHandler.svelte", "../../@xyflow/svelte/dist/lib/components/ConnectionLine/ConnectionLine.svelte", "../../@xyflow/svelte/dist/lib/container/Panel/Panel.svelte", "../../@xyflow/svelte/dist/lib/components/Attribution/Attribution.svelte", "../../@xyflow/svelte/dist/lib/container/SvelteFlow/Wrapper.svelte", "../../@xyflow/svelte/dist/lib/container/SvelteFlow/SvelteFlow.svelte", "../../@xyflow/svelte/dist/lib/components/SvelteFlowProvider/SvelteFlowProvider.svelte", "../../@xyflow/svelte/dist/lib/components/ViewportPortal/ViewportPortal.svelte", "../../@xyflow/svelte/dist/lib/components/EdgeReconnectAnchor/EdgeReconnectAnchor.svelte", "../../@xyflow/svelte/dist/lib/plugins/Controls/ControlButton.svelte", "../../@xyflow/svelte/dist/lib/plugins/Controls/Icons/Plus.svelte", "../../@xyflow/svelte/dist/lib/plugins/Controls/Icons/Minus.svelte", "../../@xyflow/svelte/dist/lib/plugins/Controls/Icons/Fit.svelte", "../../@xyflow/svelte/dist/lib/plugins/Controls/Icons/Lock.svelte", "../../@xyflow/svelte/dist/lib/plugins/Controls/Icons/Unlock.svelte", "../../@xyflow/svelte/dist/lib/plugins/Controls/Controls.svelte", "../../@xyflow/svelte/dist/lib/plugins/Background/types.js", "../../@xyflow/svelte/dist/lib/plugins/Background/DotPattern.svelte", "../../@xyflow/svelte/dist/lib/plugins/Background/LinePattern.svelte", "../../@xyflow/svelte/dist/lib/plugins/Background/Background.svelte", "../../@xyflow/svelte/dist/lib/plugins/Minimap/MinimapNode.svelte", "../../@xyflow/svelte/dist/lib/plugins/Minimap/interactive.js", "../../@xyflow/svelte/dist/lib/plugins/Minimap/Minimap.svelte", "../../@xyflow/svelte/dist/lib/plugins/NodeToolbar/NodeToolbar.svelte", "../../@xyflow/svelte/dist/lib/plugins/NodeResizer/ResizeControl.svelte", "../../@xyflow/svelte/dist/lib/plugins/NodeResizer/NodeResizer.svelte", "../../@xyflow/svelte/dist/lib/hooks/useUpdateNodeInternals.svelte.js", "../../@xyflow/svelte/dist/lib/hooks/useConnection.svelte.js", "../../@xyflow/svelte/dist/lib/hooks/useNodesEdgesViewport.svelte.js", "../../@xyflow/svelte/dist/lib/hooks/useNodeConnections.svelte.js", "../../@xyflow/svelte/dist/lib/hooks/useNodesData.svelte.js", "../../@xyflow/svelte/dist/lib/hooks/useInternalNode.svelte.js", "../../@xyflow/svelte/dist/lib/hooks/useInitialized.svelte.js", "../../@xyflow/svelte/dist/lib/hooks/useOnSelectionChange.svelte.js"],
  "sourcesContent": ["<script lang=\"ts\">\n  import { getContext } from 'svelte';\n  import {\n    Position,\n    XYHandle,\n    isMouseEvent,\n    areConnectionMapsEqual,\n    handleConnectionChange,\n    ConnectionMode,\n    getHostForElement,\n    type HandleConnection,\n    type Optional,\n    type ConnectionState,\n    type Connection\n  } from '@xyflow/system';\n\n  import { useStore } from '../../store';\n\n  import type { ConnectableContext } from '../NodeWrapper/types';\n  import type { HandleProps } from './types';\n\n  let {\n    id: handleId = null,\n    type = 'source',\n    position = Position.Top,\n    style,\n    class: className,\n    isConnectable: isConnectableProp,\n    isConnectableStart = true,\n    isConnectableEnd = true,\n    isValidConnection,\n    onconnect,\n    ondisconnect,\n    children,\n    ...rest\n  }: HandleProps = $props();\n\n  const nodeId = getContext<string>('svelteflow__node_id');\n  const isConnectableContext = getContext<ConnectableContext>('svelteflow__node_connectable');\n\n  let isTarget = $derived(type === 'target');\n  let isConnectable = $derived(\n    isConnectableProp !== undefined ? isConnectableProp : isConnectableContext.value\n  );\n\n  let store = useStore();\n  let ariaLabelConfig = $derived(store.ariaLabelConfig);\n\n  let prevConnections: Map<string, HandleConnection> | null = null;\n  $effect.pre(() => {\n    if (onconnect || ondisconnect) {\n      // connectionLookup is not reactive, so we use edges to get notified about updates\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n      store.edges;\n      let connections = store.connectionLookup.get(\n        `${nodeId}-${type}${handleId ? `-${handleId}` : ''}`\n      );\n\n      if (prevConnections && !areConnectionMapsEqual(connections, prevConnections)) {\n        const _connections = connections ?? new Map();\n\n        handleConnectionChange(prevConnections, _connections, ondisconnect);\n        handleConnectionChange(_connections, prevConnections, onconnect);\n      }\n\n      prevConnections = new Map(connections);\n    }\n  });\n\n  let [connectionInProgress, connectingFrom, connectingTo, isPossibleTargetHandle, valid] =\n    $derived.by(() => {\n      if (!store.connection.inProgress) {\n        return [false, false, false, false, null];\n      }\n\n      const { fromHandle, toHandle, isValid } = store.connection;\n\n      const connectingFrom =\n        fromHandle &&\n        fromHandle.nodeId === nodeId &&\n        fromHandle.type === type &&\n        fromHandle.id === handleId;\n\n      const connectingTo =\n        toHandle &&\n        toHandle.nodeId === nodeId &&\n        toHandle.type === type &&\n        toHandle.id === handleId;\n\n      const isPossibleTargetHandle =\n        store.connectionMode === ConnectionMode.Strict\n          ? fromHandle?.type !== type\n          : nodeId !== fromHandle?.nodeId || handleId !== fromHandle?.id;\n\n      const valid = connectingTo && isValid;\n\n      return [true, connectingFrom, connectingTo, isPossibleTargetHandle, valid];\n    });\n\n  function onConnectExtended(connection: Connection) {\n    const edge = store.onbeforeconnect?.(connection) ?? connection;\n\n    if (!edge) {\n      return;\n    }\n\n    store.addEdge(edge);\n    store.onconnect?.(connection);\n  }\n\n  function onpointerdown(event: MouseEvent | TouchEvent) {\n    const isMouseTriggered = isMouseEvent(event);\n\n    if ((isMouseTriggered && event.button === 0) || !isMouseTriggered) {\n      XYHandle.onPointerDown(event, {\n        handleId,\n        nodeId,\n        isTarget,\n        connectionRadius: store.connectionRadius,\n        domNode: store.domNode,\n        nodeLookup: store.nodeLookup,\n        connectionMode: store.connectionMode,\n        lib: 'svelte',\n        autoPanOnConnect: store.autoPanOnConnect,\n        flowId: store.flowId,\n        isValidConnection: isValidConnection ?? store.isValidConnection,\n        updateConnection: store.updateConnection,\n        cancelConnection: store.cancelConnection,\n        panBy: store.panBy,\n        onConnect: onConnectExtended,\n        onConnectStart: (event, startParams) => {\n          store.onconnectstart?.(event, {\n            nodeId: startParams.nodeId,\n            handleId: startParams.handleId,\n            handleType: startParams.handleType\n          });\n        },\n        onConnectEnd: (event, connectionState) => {\n          store.onconnectend?.(event, connectionState);\n        },\n        getTransform: () => [store.viewport.x, store.viewport.y, store.viewport.zoom],\n        getFromHandle: () => store.connection.fromHandle\n      });\n    }\n  }\n\n  function onclick(event: MouseEvent) {\n    if (!nodeId || (!store.clickConnectStartHandle && !isConnectableStart)) {\n      return;\n    }\n\n    if (!store.clickConnectStartHandle) {\n      store.onclickconnectstart?.(event, { nodeId, handleId, handleType: type });\n      store.clickConnectStartHandle = { nodeId, type, id: handleId };\n      return;\n    }\n\n    const doc = getHostForElement(event.target);\n    const isValidConnectionHandler = isValidConnection ?? store.isValidConnection;\n\n    const { connectionMode, clickConnectStartHandle, flowId, nodeLookup } = store;\n    const { connection, isValid } = XYHandle.isValid(event, {\n      handle: {\n        nodeId,\n        id: handleId,\n        type\n      },\n      connectionMode,\n      fromNodeId: clickConnectStartHandle.nodeId,\n      fromHandleId: clickConnectStartHandle.id ?? null,\n      fromType: clickConnectStartHandle.type,\n      isValidConnection: isValidConnectionHandler,\n      flowId,\n      doc,\n      lib: 'svelte',\n      nodeLookup\n    });\n\n    if (isValid && connection) {\n      onConnectExtended(connection);\n    }\n\n    const connectionClone = structuredClone($state.snapshot(store.connection)) as Optional<\n      ConnectionState,\n      'inProgress'\n    >;\n    delete connectionClone.inProgress;\n    connectionClone.toPosition = connectionClone.toHandle\n      ? connectionClone.toHandle.position\n      : null;\n    store.onclickconnectend?.(event, connectionClone);\n\n    store.clickConnectStartHandle = null;\n  }\n</script>\n\n<!--\n@component\nThe Handle component is the part of a node that can be used to connect nodes.\n-->\n<div\n  data-handleid={handleId}\n  data-nodeid={nodeId}\n  data-handlepos={position}\n  data-id=\"{store.flowId}-{nodeId}-{handleId ?? 'null'}-{type}\"\n  class={[\n    'svelte-flow__handle',\n    `svelte-flow__handle-${position}`,\n    store.noDragClass,\n    store.noPanClass,\n    position,\n    className\n  ]}\n  class:valid\n  class:connectingto={connectingTo}\n  class:connectingfrom={connectingFrom}\n  class:source={!isTarget}\n  class:target={isTarget}\n  class:connectablestart={isConnectableStart}\n  class:connectableend={isConnectableEnd}\n  class:connectable={isConnectable}\n  class:connectionindicator={isConnectable &&\n    (!connectionInProgress || isPossibleTargetHandle) &&\n    (connectionInProgress || store.clickConnectStartHandle ? isConnectableEnd : isConnectableStart)}\n  onmousedown={onpointerdown}\n  ontouchstart={onpointerdown}\n  onclick={store.clickConnect ? onclick : undefined}\n  onkeypress={() => {}}\n  {style}\n  role=\"button\"\n  aria-label={ariaLabelConfig[`handle.ariaLabel`]}\n  tabindex=\"-1\"\n  {...rest}\n>\n  {@render children?.()}\n</div>\n", "<script lang=\"ts\">\n  import { Position } from '@xyflow/system';\n\n  import { Handle } from '../Handle';\n  import type { NodeProps } from '../../types';\n\n  let {\n    data,\n    targetPosition = Position.Top,\n    sourcePosition = Position.Bottom\n  }: NodeProps = $props();\n</script>\n\n<Handle type=\"target\" position={targetPosition} />\n{data?.label}\n<Handle type=\"source\" position={sourcePosition} />\n", "<script lang=\"ts\">\n  import { Position } from '@xyflow/system';\n  import type { NodeProps } from '../../types';\n\n  import { Handle } from '../Handle';\n\n  let { data = { label: 'Node' }, sourcePosition = Position.Bottom }: NodeProps = $props();\n</script>\n\n{data?.label}\n<Handle type=\"source\" position={sourcePosition} />\n", "<script lang=\"ts\">\n  import { Position } from '@xyflow/system';\n  import type { NodeProps } from '../../types';\n\n  import { Handle } from '../Handle';\n\n  let { data = { label: 'Node' }, targetPosition = Position.Top }: NodeProps = $props();\n</script>\n\n{data?.label}\n<Handle type=\"target\" position={targetPosition} />\n", "import 'svelte/internal/disclose-version';\n\nGroupNode[$.FILENAME] = 'node_modules/@xyflow/svelte/dist/lib/components/nodes/GroupNode.svelte';\n\nimport * as $ from 'svelte/internal/client';\n\nfunction GroupNode($$anchor, $$props) {\n\t$.check_target(new.target);\n\t$.push($$props, true, GroupNode);\n\treturn $.pop({ ...$.legacy_api() });\n}\n\nif (import.meta.hot) {\n\tGroupNode = $.hmr(GroupNode, () => GroupNode[$.HMR].source);\n\n\timport.meta.hot.accept((module) => {\n\t\tmodule.default[$.HMR].source = GroupNode[$.HMR].source;\n\t\t$.set(GroupNode[$.HMR].source, module.default[$.HMR].original);\n\t});\n}\n\nexport default GroupNode;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6IiIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiR3JvdXBOb2RlLnN2ZWx0ZSJdfQ==", "import { useStore } from '../../store';\nfunction tryToMount(node, domNode, target) {\n    if (!target || !domNode) {\n        return;\n    }\n    const targetEl = target === 'root' ? domNode : domNode.querySelector(`.svelte-flow__${target}`);\n    if (targetEl) {\n        targetEl.appendChild(node);\n    }\n}\nexport function portal(node, target) {\n    const { domNode } = $derived(useStore());\n    let destroyEffect;\n    // svelte-ignore state_referenced_locally\n    if (domNode) {\n        // if the domNode is already mounted, we can directly try to mount the node\n        tryToMount(node, domNode, target);\n    }\n    else {\n        // if the domNode is not mounted yet, we need to wait for it to be ready\n        destroyEffect = $effect.root(() => {\n            $effect(() => {\n                tryToMount(node, domNode, target);\n                destroyEffect?.();\n            });\n        });\n    }\n    return {\n        async update(target) {\n            tryToMount(node, domNode, target);\n        },\n        destroy() {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n            destroyEffect?.();\n        }\n    };\n}\n", "export function hideOnSSR() {\n    let hide = $state(typeof window === 'undefined');\n    if (hide) {\n        const destroyEffect = $effect.root(() => {\n            $effect(() => {\n                hide = false;\n                destroyEffect?.();\n            });\n        });\n    }\n    return {\n        get value() {\n            return hide;\n        }\n    };\n}\n", "import { isNodeBase, isEdgeBase } from '@xyflow/system';\n/**\n * Test whether an object is usable as a Node\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Node if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Node\n */\nexport const isNode = (element) => isNodeBase(element);\n/**\n * Test whether an object is usable as an Edge\n * @public\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Edge if it returns true\n * @param element - The element to test\n * @returns A boolean indicating whether the element is an Edge\n */\nexport const isEdge = (element) => isEdgeBase(element);\nexport function toPxString(value) {\n    return value === undefined ? undefined : `${value}px`;\n}\nexport const arrowKeyDiffs = {\n    ArrowUp: { x: 0, y: -1 },\n    ArrowDown: { x: 0, y: 1 },\n    ArrowLeft: { x: -1, y: 0 },\n    ArrowRight: { x: 1, y: 0 }\n};\n", "<script lang=\"ts\">\n  import { getContext } from 'svelte';\n  import { hideOnSSR, portal } from '../../actions/portal';\n\n  import { useStore } from '../../store';\n  import type { EdgeLabelProps } from './types';\n  import { toPxString } from '../../utils';\n\n  let {\n    x = 0,\n    y = 0,\n    width,\n    height,\n    selectEdgeOnClick = false,\n    transparent = false,\n    class: className,\n    children,\n    ...rest\n  }: EdgeLabelProps = $props();\n\n  const store = useStore();\n\n  const id = getContext<string>('svelteflow__edge_id');\n\n  let z = $derived.by(() => {\n    return store.visible.edges.get(id)?.zIndex;\n  });\n</script>\n\n<div\n  use:portal={'edge-labels'}\n  style:display={hideOnSSR().value ? 'none' : undefined}\n  class={['svelte-flow__edge-label', { transparent }, className]}\n  style:cursor={selectEdgeOnClick ? 'pointer' : undefined}\n  style:transform=\"translate(-50%, -50%) translate({x}px,{y}px)\"\n  style:pointer-events=\"all\"\n  style:width={toPxString(width)}\n  style:height={toPxString(height)}\n  style:z-index={z}\n  tabindex=\"-1\"\n  onclick={() => {\n    if (selectEdgeOnClick && id) store.handleEdgeSelection(id);\n  }}\n  {...rest}\n>\n  {@render children?.()}\n</div>\n\n<style>\n  .transparent {\n    background: transparent;\n  }\n</style>\n", "<script lang=\"ts\">\n  import type { BaseEdgeProps } from '../../types';\n  import EdgeLabel from '../EdgeLabel/EdgeLabel.svelte';\n\n  let {\n    id,\n    path,\n    label,\n    labelX,\n    labelY,\n    labelStyle,\n    markerStart,\n    markerEnd,\n    style,\n    interactionWidth = 20,\n    class: className,\n    ...rest\n  }: BaseEdgeProps = $props();\n</script>\n\n<path\n  {id}\n  d={path}\n  class={['svelte-flow__edge-path', className]}\n  marker-start={markerStart}\n  marker-end={markerEnd}\n  fill=\"none\"\n  {style}\n/>\n\n{#if interactionWidth > 0}\n  <path\n    d={path}\n    stroke-opacity={0}\n    stroke-width={interactionWidth}\n    fill=\"none\"\n    class=\"svelte-flow__edge-interaction\"\n    {...rest}\n  />\n{/if}\n\n{#if label}\n  <EdgeLabel x={labelX} y={labelY} style={labelStyle} selectEdgeOnClick>\n    {label}\n  </EdgeLabel>\n{/if}\n", "<script lang=\"ts\">\n  import { getBezierPath } from '@xyflow/system';\n\n  import BaseEdge from './BaseEdge.svelte';\n  import type { BezierEdgeProps } from '../../types';\n\n  let {\n    id,\n    interactionWidth,\n    label,\n    labelStyle,\n    markerEnd,\n    markerStart,\n    pathOptions,\n    sourcePosition,\n    sourceX,\n    sourceY,\n    style,\n    targetPosition,\n    targetX,\n    targetY\n  }: BezierEdgeProps = $props();\n\n  let [path, labelX, labelY] = $derived(\n    getBezierPath({\n      sourceX,\n      sourceY,\n      targetX,\n      targetY,\n      sourcePosition,\n      targetPosition,\n      curvature: pathOptions?.curvature\n    })\n  );\n</script>\n\n<BaseEdge\n  {id}\n  {path}\n  {labelX}\n  {labelY}\n  {label}\n  {labelStyle}\n  {markerStart}\n  {markerEnd}\n  {interactionWidth}\n  {style}\n/>\n", "<script lang=\"ts\">\n  import { getSmoothStepPath } from '@xyflow/system';\n\n  import BaseEdge from './BaseEdge.svelte';\n  import type { SmoothStepEdgeProps } from '../../types';\n\n  let {\n    id,\n    interactionWidth,\n    label,\n    labelStyle,\n    style,\n    markerEnd,\n    markerStart,\n    pathOptions,\n    sourcePosition,\n    sourceX,\n    sourceY,\n    targetPosition,\n    targetX,\n    targetY\n  }: SmoothStepEdgeProps = $props();\n\n  let [path, labelX, labelY] = $derived(\n    getSmoothStepPath({\n      sourceX,\n      sourceY,\n      targetX,\n      targetY,\n      sourcePosition,\n      targetPosition,\n      borderRadius: pathOptions?.borderRadius,\n      offset: pathOptions?.offset\n    })\n  );\n</script>\n\n<BaseEdge\n  {id}\n  {path}\n  {labelX}\n  {labelY}\n  {label}\n  {labelStyle}\n  {markerStart}\n  {markerEnd}\n  {interactionWidth}\n  {style}\n/>\n", "<script lang=\"ts\">\n  import { getSmoothStepPath } from '@xyflow/system';\n\n  import BaseEdge from './BaseEdge.svelte';\n  import type { EdgeProps } from '../../types';\n\n  let {\n    interactionWidth,\n    label,\n    labelStyle,\n    style,\n    markerEnd,\n    markerStart,\n    sourcePosition,\n    sourceX,\n    sourceY,\n    targetPosition,\n    targetX,\n    targetY\n  }: EdgeProps = $props();\n\n  let [path, labelX, labelY] = $derived(\n    getSmoothStepPath({\n      sourceX,\n      sourceY,\n      targetX,\n      targetY,\n      sourcePosition,\n      targetPosition\n    })\n  );\n</script>\n\n<BaseEdge\n  {path}\n  {labelX}\n  {labelY}\n  {label}\n  {labelStyle}\n  {markerStart}\n  {markerEnd}\n  {interactionWidth}\n  {style}\n/>\n", "<script lang=\"ts\">\n  import { getStraightPath } from '@xyflow/system';\n\n  import BaseEdge from './BaseEdge.svelte';\n  import type { StraightEdgeProps } from '../../types';\n\n  let {\n    id,\n    label,\n    labelStyle,\n    style,\n    markerStart,\n    markerEnd,\n    interactionWidth,\n    sourceX,\n    sourceY,\n    targetX,\n    targetY\n  }: StraightEdgeProps = $props();\n\n  let [path, labelX, labelY] = $derived(\n    getStraightPath({\n      sourceX,\n      sourceY,\n      targetX,\n      targetY\n    })\n  );\n</script>\n\n<BaseEdge\n  {id}\n  {path}\n  {labelX}\n  {labelY}\n  {label}\n  {labelStyle}\n  {markerStart}\n  {markerEnd}\n  {interactionWidth}\n  {style}\n/>\n", "<script lang=\"ts\">\n  import { getStraightPath } from '@xyflow/system';\n\n  import BaseEdge from './BaseEdge.svelte';\n  import type { EdgeProps } from '../../types';\n\n  let {\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    label,\n    labelStyle,\n    markerStart,\n    markerEnd,\n    interactionWidth,\n    style\n  }: EdgeProps = $props();\n\n  let [path, labelX, labelY] = $derived(\n    getStraightPath({\n      sourceX,\n      sourceY,\n      targetX,\n      targetY\n    })\n  );\n</script>\n\n<BaseEdge\n  {path}\n  {labelX}\n  {labelY}\n  {label}\n  {labelStyle}\n  {markerStart}\n  {markerEnd}\n  {interactionWidth}\n  {style}\n/>\n", "<script lang=\"ts\">\n  import { getSmoothStepPath } from '@xyflow/system';\n\n  import BaseEdge from './BaseEdge.svelte';\n  import type { StepEdgeProps } from '../../types';\n\n  let {\n    id,\n    label,\n    labelStyle,\n    style,\n    markerStart,\n    markerEnd,\n    pathOptions,\n    interactionWidth,\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition\n  }: StepEdgeProps = $props();\n\n  let [path, labelX, labelY] = $derived(\n    getSmoothStepPath({\n      sourceX,\n      sourceY,\n      targetX,\n      targetY,\n      sourcePosition,\n      targetPosition,\n      borderRadius: 0,\n      offset: pathOptions?.offset\n    })\n  );\n</script>\n\n<BaseEdge\n  {id}\n  {path}\n  {labelX}\n  {labelY}\n  {label}\n  {labelStyle}\n  {markerStart}\n  {markerEnd}\n  {interactionWidth}\n  {style}\n/>\n", "<script lang=\"ts\">\n  import { getSmoothStepPath } from '@xyflow/system';\n\n  import BaseEdge from './BaseEdge.svelte';\n  import type { EdgeProps } from '../../types';\n\n  let {\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n    label,\n    labelStyle,\n    markerStart,\n    markerEnd,\n    interactionWidth,\n    style\n  }: EdgeProps = $props();\n\n  let [path, labelX, labelY] = $derived(\n    getSmoothStepPath({\n      sourceX,\n      sourceY,\n      targetX,\n      targetY,\n      sourcePosition,\n      targetPosition,\n      borderRadius: 0\n    })\n  );\n</script>\n\n<BaseEdge\n  {path}\n  {labelX}\n  {labelY}\n  {label}\n  {labelStyle}\n  {markerStart}\n  {markerEnd}\n  {interactionWidth}\n  {style}\n/>\n", "import { ConnectionMode, getEdgePosition, getElevatedEdgeZIndex, getNodesInside, isEdgeVisible } from '@xyflow/system';\nexport function getVisibleNodes(nodeLookup, transform, width, height) {\n    const visibleNodes = new Map();\n    getNodesInside(nodeLookup, { x: 0, y: 0, width: width, height: height }, transform, true).forEach((node) => {\n        visibleNodes.set(node.id, node);\n    });\n    return visibleNodes;\n}\nexport function getLayoutedEdges(options) {\n    const { edges, defaultEdgeOptions, nodeLookup, previousEdges, connectionMode, onerror, onlyRenderVisible, elevateEdgesOnSelect } = options;\n    const layoutedEdges = new Map();\n    for (const edge of edges) {\n        const sourceNode = nodeLookup.get(edge.source);\n        const targetNode = nodeLookup.get(edge.target);\n        if (!sourceNode || !targetNode) {\n            continue;\n        }\n        if (onlyRenderVisible) {\n            const { visibleNodes, transform, width, height } = options;\n            if (isEdgeVisible({\n                sourceNode,\n                targetNode,\n                width: width,\n                height: height,\n                transform: transform\n            })) {\n                visibleNodes.set(sourceNode.id, sourceNode);\n                visibleNodes.set(targetNode.id, targetNode);\n            }\n            else {\n                continue;\n            }\n        }\n        // we reuse the previous edge object if\n        // the current and previous edge are the same\n        // and the source and target node are the same\n        // and references to internalNodes are the same\n        const previous = previousEdges.get(edge.id);\n        if (previous &&\n            edge === previous.edge &&\n            sourceNode == previous.sourceNode &&\n            targetNode == previous.targetNode) {\n            layoutedEdges.set(edge.id, previous);\n            continue;\n        }\n        const edgePosition = getEdgePosition({\n            id: edge.id,\n            sourceNode,\n            targetNode,\n            sourceHandle: edge.sourceHandle || null,\n            targetHandle: edge.targetHandle || null,\n            connectionMode,\n            onError: onerror\n        });\n        if (edgePosition) {\n            layoutedEdges.set(edge.id, {\n                ...defaultEdgeOptions,\n                ...edge,\n                ...edgePosition,\n                zIndex: getElevatedEdgeZIndex({\n                    selected: edge.selected,\n                    zIndex: edge.zIndex ?? defaultEdgeOptions.zIndex,\n                    sourceNode,\n                    targetNode,\n                    elevateOnSelect: elevateEdgesOnSelect\n                }),\n                sourceNode,\n                targetNode,\n                edge\n            });\n        }\n    }\n    return layoutedEdges;\n}\n", "import { infiniteExtent, SelectionMode, ConnectionMode, devWarn, adoptUserNodes, getViewportForBounds, updateConnectionLookup, initialConnection, mergeAriaLabelConfig, getInternalNodesBounds, createMarkerIds, pointToRendererPoint, fitViewport } from '@xyflow/system';\nimport DefaultNode from '../components/nodes/DefaultNode.svelte';\nimport InputNode from '../components/nodes/InputNode.svelte';\nimport OutputNode from '../components/nodes/OutputNode.svelte';\nimport GroupNode from '../components/nodes/GroupNode.svelte';\nimport { BezierEdgeInternal, SmoothStepEdgeInternal, StraightEdgeInternal, StepEdgeInternal } from '../components/edges';\nimport { MediaQuery } from 'svelte/reactivity';\nimport { getLayoutedEdges, getVisibleNodes } from './visibleElements';\nexport const initialNodeTypes = {\n    input: InputNode,\n    output: OutputNode,\n    default: DefaultNode,\n    group: GroupNode\n};\nexport const initialEdgeTypes = {\n    straight: StraightEdgeInternal,\n    smoothstep: SmoothStepEdgeInternal,\n    default: BezierEdgeInternal,\n    step: StepEdgeInternal\n};\nfunction getInitialViewport(\n// This is just used to make sure adoptUserNodes is called before we calculate the viewport\n_nodesInitialized, fitView, initialViewport, width, height, nodeLookup) {\n    if (fitView && !initialViewport && width && height) {\n        const bounds = getInternalNodesBounds(nodeLookup, {\n            filter: (node) => !!((node.width || node.initialWidth) && (node.height || node.initialHeight))\n        });\n        return getViewportForBounds(bounds, width, height, 0.5, 2, 0.1);\n    }\n    else {\n        return initialViewport ?? { x: 0, y: 0, zoom: 1 };\n    }\n}\nexport function getInitialStore(signals) {\n    // We use a class here, because Svelte adds getters & setter for us.\n    // Inline classes have some performance implications but we just call it once (max twice).\n    class SvelteFlowStore {\n        flowId = $derived(signals.props.id ?? '1');\n        domNode = $state(null);\n        panZoom = $state(null);\n        width = $state(signals.width ?? 0);\n        height = $state(signals.height ?? 0);\n        nodesInitialized = $derived.by(() => {\n            const nodesInitialized = adoptUserNodes(signals.nodes, this.nodeLookup, this.parentLookup, {\n                nodeExtent: this.nodeExtent,\n                nodeOrigin: this.nodeOrigin,\n                elevateNodesOnSelect: signals.props.elevateNodesOnSelect ?? true,\n                checkEquality: true\n            });\n            if (this.fitViewQueued && nodesInitialized) {\n                if (this.fitViewOptions?.duration) {\n                    this.resolveFitView();\n                }\n                else {\n                    /**\n                     * When no duration is set, viewport is set immediately which prevents an update\n                     * I do not understand why, however we are setting state in a derived which is a no-go\n                     */\n                    queueMicrotask(() => {\n                        this.resolveFitView();\n                    });\n                }\n            }\n            return nodesInitialized;\n        });\n        viewportInitialized = $derived(this.panZoom !== null);\n        _edges = $derived.by(() => {\n            updateConnectionLookup(this.connectionLookup, this.edgeLookup, signals.edges);\n            return signals.edges;\n        });\n        get nodes() {\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n            this.nodesInitialized;\n            return signals.nodes;\n        }\n        set nodes(nodes) {\n            signals.nodes = nodes;\n        }\n        get edges() {\n            return this._edges;\n        }\n        set edges(edges) {\n            signals.edges = edges;\n        }\n        _prevSelectedNodes = [];\n        _prevSelectedNodeIds = new Set();\n        selectedNodes = $derived.by(() => {\n            const selectedNodesCount = this._prevSelectedNodeIds.size;\n            const selectedNodeIds = new Set();\n            const selectedNodes = this.nodes.filter((node) => {\n                if (node.selected) {\n                    selectedNodeIds.add(node.id);\n                    this._prevSelectedNodeIds.delete(node.id);\n                }\n                return node.selected;\n            });\n            // Either the number of selected nodes has changed or two nodes changed their selection state\n            // at the same time. However then the previously selected node will be inside _prevSelectedNodeIds\n            if (selectedNodesCount !== selectedNodeIds.size || this._prevSelectedNodeIds.size > 0) {\n                this._prevSelectedNodes = selectedNodes;\n            }\n            this._prevSelectedNodeIds = selectedNodeIds;\n            return this._prevSelectedNodes;\n        });\n        _prevSelectedEdges = [];\n        _prevSelectedEdgeIds = new Set();\n        selectedEdges = $derived.by(() => {\n            const selectedEdgesCount = this._prevSelectedEdgeIds.size;\n            const selectedEdgeIds = new Set();\n            const selectedEdges = this.edges.filter((edge) => {\n                if (edge.selected) {\n                    selectedEdgeIds.add(edge.id);\n                    this._prevSelectedEdgeIds.delete(edge.id);\n                }\n                return edge.selected;\n            });\n            // Either the number of selected edges has changed or two edges changed their selection state\n            // at the same time. However then the previously selected edge will be inside _prevSelectedEdgeIds\n            if (selectedEdgesCount !== selectedEdgeIds.size || this._prevSelectedEdgeIds.size > 0) {\n                this._prevSelectedEdges = selectedEdges;\n            }\n            this._prevSelectedEdgeIds = selectedEdgeIds;\n            return this._prevSelectedEdges;\n        });\n        selectionChangeHandlers = new Map();\n        nodeLookup = new Map();\n        parentLookup = new Map();\n        connectionLookup = new Map();\n        edgeLookup = new Map();\n        _prevVisibleEdges = new Map();\n        visible = $derived.by(() => {\n            const { \n            // We need to access this._nodes to trigger on changes\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            nodes, _edges: edges, _prevVisibleEdges: previousEdges, nodeLookup, connectionMode, onerror, onlyRenderVisibleElements, defaultEdgeOptions } = this;\n            let visibleNodes;\n            let visibleEdges;\n            const options = {\n                edges,\n                defaultEdgeOptions,\n                previousEdges,\n                nodeLookup,\n                connectionMode,\n                elevateEdgesOnSelect: signals.props.elevateEdgesOnSelect ?? true,\n                onerror\n            };\n            if (onlyRenderVisibleElements) {\n                // We only subscribe to viewport, width, height if onlyRenderVisibleElements is true\n                const { viewport, width, height } = this;\n                const transform = [viewport.x, viewport.y, viewport.zoom];\n                visibleNodes = getVisibleNodes(nodeLookup, transform, width, height);\n                visibleEdges = getLayoutedEdges({\n                    ...options,\n                    onlyRenderVisible: true,\n                    visibleNodes,\n                    transform,\n                    width,\n                    height\n                });\n            }\n            else {\n                visibleNodes = this.nodeLookup;\n                visibleEdges = getLayoutedEdges(options);\n            }\n            return {\n                nodes: visibleNodes,\n                edges: visibleEdges\n            };\n        });\n        nodesDraggable = $derived(signals.props.nodesDraggable ?? true);\n        nodesConnectable = $derived(signals.props.nodesConnectable ?? true);\n        elementsSelectable = $derived(signals.props.elementsSelectable ?? true);\n        nodesFocusable = $derived(signals.props.nodesFocusable ?? true);\n        edgesFocusable = $derived(signals.props.edgesFocusable ?? true);\n        disableKeyboardA11y = $derived(signals.props.disableKeyboardA11y ?? false);\n        minZoom = $derived(signals.props.minZoom ?? 0.5);\n        maxZoom = $derived(signals.props.maxZoom ?? 2);\n        nodeOrigin = $derived(signals.props.nodeOrigin ?? [0, 0]);\n        nodeExtent = $derived(signals.props.nodeExtent ?? infiniteExtent);\n        translateExtent = $derived(signals.props.translateExtent ?? infiniteExtent);\n        defaultEdgeOptions = $derived(signals.props.defaultEdgeOptions ?? {});\n        nodeDragThreshold = $derived(signals.props.nodeDragThreshold ?? 1);\n        autoPanOnNodeDrag = $derived(signals.props.autoPanOnNodeDrag ?? true);\n        autoPanOnConnect = $derived(signals.props.autoPanOnConnect ?? true);\n        autoPanOnNodeFocus = $derived(signals.props.autoPanOnNodeFocus ?? true);\n        fitViewQueued = signals.props.fitView ?? false;\n        fitViewOptions = signals.props.fitViewOptions;\n        fitViewResolver = null;\n        snapGrid = $derived(signals.props.snapGrid ?? null);\n        dragging = $state(false);\n        selectionRect = $state(null);\n        selectionKeyPressed = $state(false);\n        multiselectionKeyPressed = $state(false);\n        deleteKeyPressed = $state(false);\n        panActivationKeyPressed = $state(false);\n        zoomActivationKeyPressed = $state(false);\n        selectionRectMode = $state(null);\n        ariaLiveMessage = $state('');\n        selectionMode = $derived(signals.props.selectionMode ?? SelectionMode.Partial);\n        nodeTypes = $derived({ ...initialNodeTypes, ...signals.props.nodeTypes });\n        edgeTypes = $derived({ ...initialEdgeTypes, ...signals.props.edgeTypes });\n        noPanClass = $derived(signals.props.noPanClass ?? 'nopan');\n        noDragClass = $derived(signals.props.noDragClass ?? 'nodrag');\n        noWheelClass = $derived(signals.props.noWheelClass ?? 'nowheel');\n        ariaLabelConfig = $derived(mergeAriaLabelConfig(signals.props.ariaLabelConfig));\n        // _viewport is the internal viewport.\n        // when binding to viewport, we operate on signals.viewport instead\n        _viewport = $state(getInitialViewport(this.nodesInitialized, signals.props.fitView, signals.props.initialViewport, this.width, this.height, this.nodeLookup));\n        get viewport() {\n            return signals.viewport ?? this._viewport;\n        }\n        set viewport(newViewport) {\n            if (signals.viewport) {\n                signals.viewport = newViewport;\n            }\n            this._viewport = newViewport;\n        }\n        // _connection is viewport independent and originating from XYHandle\n        _connection = $state(initialConnection);\n        // We derive a viewport dependent connection here\n        connection = $derived.by(() => {\n            if (this._connection.inProgress) {\n                return {\n                    ...this._connection,\n                    to: pointToRendererPoint(this._connection.to, [\n                        this.viewport.x,\n                        this.viewport.y,\n                        this.viewport.zoom\n                    ])\n                };\n            }\n            else {\n                return this._connection;\n            }\n        });\n        connectionMode = $derived(signals.props.connectionMode ?? ConnectionMode.Strict);\n        connectionRadius = $derived(signals.props.connectionRadius ?? 20);\n        isValidConnection = $derived(signals.props.isValidConnection ?? (() => true));\n        selectNodesOnDrag = $derived(signals.props.selectNodesOnDrag ?? true);\n        defaultMarkerColor = $derived(signals.props.defaultMarkerColor ?? '#b1b1b7');\n        markers = $derived.by(() => {\n            return createMarkerIds(signals.edges, {\n                defaultColor: this.defaultMarkerColor,\n                id: this.flowId,\n                defaultMarkerStart: this.defaultEdgeOptions.markerStart,\n                defaultMarkerEnd: this.defaultEdgeOptions.markerEnd\n            });\n        });\n        onlyRenderVisibleElements = $derived(signals.props.onlyRenderVisibleElements ?? false);\n        onerror = $derived(signals.props.onflowerror ?? devWarn);\n        ondelete = $derived(signals.props.ondelete);\n        onbeforedelete = $derived(signals.props.onbeforedelete);\n        onbeforeconnect = $derived(signals.props.onbeforeconnect);\n        onconnect = $derived(signals.props.onconnect);\n        onconnectstart = $derived(signals.props.onconnectstart);\n        onconnectend = $derived(signals.props.onconnectend);\n        onbeforereconnect = $derived(signals.props.onbeforereconnect);\n        onreconnect = $derived(signals.props.onreconnect);\n        onreconnectstart = $derived(signals.props.onreconnectstart);\n        onreconnectend = $derived(signals.props.onreconnectend);\n        clickConnect = $derived(signals.props.clickConnect ?? true);\n        onclickconnectstart = $derived(signals.props.onclickconnectstart);\n        onclickconnectend = $derived(signals.props.onclickconnectend);\n        clickConnectStartHandle = $state(null);\n        onselectiondrag = $derived(signals.props.onselectiondrag);\n        onselectiondragstart = $derived(signals.props.onselectiondragstart);\n        onselectiondragstop = $derived(signals.props.onselectiondragstop);\n        resolveFitView = async () => {\n            if (!this.panZoom) {\n                return;\n            }\n            await fitViewport({\n                nodes: this.nodeLookup,\n                width: this.width,\n                height: this.height,\n                panZoom: this.panZoom,\n                minZoom: this.minZoom,\n                maxZoom: this.maxZoom\n            }, this.fitViewOptions);\n            this.fitViewResolver?.resolve(true);\n            /**\n             * wait for the fitViewport to resolve before deleting the resolver,\n             * we want to reuse the old resolver if the user calls fitView again in the mean time\n             */\n            this.fitViewQueued = false;\n            this.fitViewOptions = undefined;\n            this.fitViewResolver = null;\n        };\n        _prefersDark = new MediaQuery('(prefers-color-scheme: dark)', signals.props.colorModeSSR === 'dark');\n        colorMode = $derived(signals.props.colorMode === 'system'\n            ? this._prefersDark.current\n                ? 'dark'\n                : 'light'\n            : (signals.props.colorMode ?? 'light'));\n        constructor() {\n            if (process.env.NODE_ENV === 'development') {\n                warnIfDeeplyReactive(signals.nodes, 'nodes');\n                warnIfDeeplyReactive(signals.edges, 'edges');\n            }\n        }\n        resetStoreValues() {\n            this.dragging = false;\n            this.selectionRect = null;\n            this.selectionRectMode = null;\n            this.selectionKeyPressed = false;\n            this.multiselectionKeyPressed = false;\n            this.deleteKeyPressed = false;\n            this.panActivationKeyPressed = false;\n            this.zoomActivationKeyPressed = false;\n            this._connection = initialConnection;\n            this.clickConnectStartHandle = null;\n            this.viewport = signals.props.initialViewport ?? { x: 0, y: 0, zoom: 1 };\n            this.ariaLiveMessage = '';\n        }\n    }\n    return new SvelteFlowStore();\n}\n// Only way to check if an object is a proxy\n// is to see if is failes to perform a structured clone\nfunction warnIfDeeplyReactive(array, name) {\n    try {\n        if (array && array.length > 0) {\n            structuredClone(array[0]);\n        }\n    }\n    catch {\n        console.warn(`Use $state.raw for ${name} to prevent performance issues.`);\n    }\n}\n", "import { key } from '../store';\nimport { getContext } from 'svelte';\n/**\n * Warns the user that they should use $derived() when calling a hook.\n * This is not neccessarry when the hook is called inside a child of <SvelteFlowFlow />,\n * however exceptions can be made if you don't want to return a closure.\n * @param functionName - The name of the function that is being called\n * @param force - If true, the warning will be shown regardless if child of <SvelteFlowFlow />\n */\nexport function derivedWarning(functionName) {\n    const storeContext = getContext(key);\n    if (!storeContext) {\n        throw new Error(`In order to use ${functionName}() you need to wrap your component in a <SvelteFlowProvider />`);\n    }\n    if (storeContext.provider && typeof window === 'object' && !$effect.tracking()) {\n        throw new Error(`Use $derived(${functionName}()) to receive updates when values change.`);\n    }\n}\n", "import { getContext } from 'svelte';\nimport { key } from '../store';\nimport { derivedWarning } from './derivedWarning.svelte';\nexport function useStore() {\n    const storeContext = getContext(key);\n    if (!storeContext) {\n        throw new Error('To call useStore outside of <SvelteFlow /> you need to wrap your component in a <SvelteFlowProvider />');\n    }\n    if (process.env.NODE_ENV === 'development') {\n        derivedWarning('useStore');\n    }\n    return storeContext.getStore();\n}\n", "import { panBy as panBySystem, updateNodeInternals as updateNodeInternalsSystem, addEdge as addEdgeUtil, initialConnection, errorMessages, updateAbsolutePositions, snapPosition, calculateNodePosition } from '@xyflow/system';\nimport { initialEdgeTypes, initialNodeTypes, getInitialStore } from './initial-store.svelte';\nimport {} from './types';\nexport const key = Symbol();\nexport { useStore } from '../hooks/useStore';\nexport function createStore(signals) {\n    const store = getInitialStore(signals);\n    function setNodeTypes(nodeTypes) {\n        store.nodeTypes = {\n            ...initialNodeTypes,\n            ...nodeTypes\n        };\n    }\n    function setEdgeTypes(edgeTypes) {\n        store.edgeTypes = {\n            ...initialEdgeTypes,\n            ...edgeTypes\n        };\n    }\n    function addEdge(edgeParams) {\n        store.edges = addEdgeUtil(edgeParams, store.edges);\n    }\n    const updateNodePositions = (nodeDragItems, dragging = false) => {\n        store.nodes = store.nodes.map((node) => {\n            const dragItem = nodeDragItems.get(node.id);\n            return dragItem ? { ...node, position: dragItem.position, dragging } : node;\n        });\n    };\n    function updateNodeInternals(updates) {\n        const { changes, updatedInternals } = updateNodeInternalsSystem(updates, store.nodeLookup, store.parentLookup, store.domNode, store.nodeOrigin);\n        if (!updatedInternals) {\n            return;\n        }\n        updateAbsolutePositions(store.nodeLookup, store.parentLookup, {\n            nodeOrigin: store.nodeOrigin,\n            nodeExtent: store.nodeExtent\n        });\n        if (store.fitViewQueued) {\n            store.resolveFitView();\n        }\n        const newNodes = new Map();\n        for (const change of changes) {\n            const userNode = store.nodeLookup.get(change.id)?.internals.userNode;\n            if (!userNode) {\n                continue;\n            }\n            const node = { ...userNode };\n            switch (change.type) {\n                case 'dimensions': {\n                    const measured = { ...node.measured, ...change.dimensions };\n                    if (change.setAttributes) {\n                        node.width = change.dimensions?.width ?? node.width;\n                        node.height = change.dimensions?.height ?? node.height;\n                    }\n                    node.measured = measured;\n                    break;\n                }\n                case 'position':\n                    node.position = change.position ?? node.position;\n                    break;\n            }\n            newNodes.set(change.id, node);\n        }\n        store.nodes = store.nodes.map((node) => newNodes.get(node.id) ?? node);\n    }\n    function fitView(options) {\n        // We either create a new Promise or reuse the existing one\n        // Even if fitView is called multiple times in a row, we only end up with a single Promise\n        const fitViewResolver = store.fitViewResolver ?? Promise.withResolvers();\n        // We schedule a fitView by setting fitViewQueued and triggering a setNodes\n        store.fitViewQueued = true;\n        store.fitViewOptions = options;\n        store.fitViewResolver = fitViewResolver;\n        // We need to update the nodes so that adoptUserNodes is triggered\n        store.nodes = [...store.nodes];\n        return fitViewResolver.promise;\n    }\n    async function setCenter(x, y, options) {\n        const nextZoom = typeof options?.zoom !== 'undefined' ? options.zoom : store.maxZoom;\n        const currentPanZoom = store.panZoom;\n        if (!currentPanZoom) {\n            return Promise.resolve(false);\n        }\n        await currentPanZoom.setViewport({\n            x: store.width / 2 - x * nextZoom,\n            y: store.height / 2 - y * nextZoom,\n            zoom: nextZoom\n        }, { duration: options?.duration, ease: options?.ease, interpolate: options?.interpolate });\n        return Promise.resolve(true);\n    }\n    function zoomBy(factor, options) {\n        const panZoom = store.panZoom;\n        if (!panZoom) {\n            return Promise.resolve(false);\n        }\n        return panZoom.scaleBy(factor, options);\n    }\n    function zoomIn(options) {\n        return zoomBy(1.2, options);\n    }\n    function zoomOut(options) {\n        return zoomBy(1 / 1.2, options);\n    }\n    function setMinZoom(minZoom) {\n        const panZoom = store.panZoom;\n        if (panZoom) {\n            panZoom.setScaleExtent([minZoom, store.maxZoom]);\n            store.minZoom = minZoom;\n        }\n    }\n    function setMaxZoom(maxZoom) {\n        const panZoom = store.panZoom;\n        if (panZoom) {\n            panZoom.setScaleExtent([store.minZoom, maxZoom]);\n            store.maxZoom = maxZoom;\n        }\n    }\n    function setTranslateExtent(extent) {\n        const panZoom = store.panZoom;\n        if (panZoom) {\n            panZoom.setTranslateExtent(extent);\n            store.translateExtent = extent;\n        }\n    }\n    function setPaneClickDistance(distance) {\n        store.panZoom?.setClickDistance(distance);\n    }\n    function deselect(elements, elementsToDeselect = null) {\n        let deselected = false;\n        const newElements = elements.map((element) => {\n            const shouldDeselect = elementsToDeselect ? elementsToDeselect.has(element.id) : true;\n            if (shouldDeselect && element.selected) {\n                deselected = true;\n                return { ...element, selected: false };\n            }\n            return element;\n        });\n        return [deselected, newElements];\n    }\n    function unselectNodesAndEdges(params) {\n        const nodesToDeselect = params?.nodes ? new Set(params.nodes.map((node) => node.id)) : null;\n        const [nodesDeselected, newNodes] = deselect(store.nodes, nodesToDeselect);\n        if (nodesDeselected) {\n            store.nodes = newNodes;\n        }\n        const edgesToDeselect = params?.edges ? new Set(params.edges.map((node) => node.id)) : null;\n        const [edgesDeselected, newEdges] = deselect(store.edges, edgesToDeselect);\n        if (edgesDeselected) {\n            store.edges = newEdges;\n        }\n    }\n    function addSelectedNodes(ids) {\n        const isMultiSelection = store.multiselectionKeyPressed;\n        store.nodes = store.nodes.map((node) => {\n            const nodeWillBeSelected = ids.includes(node.id);\n            const selected = isMultiSelection ? node.selected || nodeWillBeSelected : nodeWillBeSelected;\n            if (node.selected !== selected) {\n                // we need to mutate the node here in order to have the correct selected state in the drag handler\n                const internalNode = store.nodeLookup.get(node.id);\n                if (internalNode)\n                    internalNode.selected = selected;\n                node.selected = selected;\n                return { ...node };\n            }\n            return node;\n        });\n        if (!isMultiSelection) {\n            unselectNodesAndEdges({ nodes: [] });\n        }\n    }\n    function addSelectedEdges(ids) {\n        const isMultiSelection = store.multiselectionKeyPressed;\n        store.edges = store.edges.map((edge) => {\n            const edgeWillBeSelected = ids.includes(edge.id);\n            const selected = isMultiSelection ? edge.selected || edgeWillBeSelected : edgeWillBeSelected;\n            if (edge.selected !== selected) {\n                return { ...edge, selected };\n            }\n            return edge;\n        });\n        if (!isMultiSelection) {\n            unselectNodesAndEdges({ edges: [] });\n        }\n    }\n    function handleNodeSelection(id, unselect, nodeRef) {\n        const node = store.nodeLookup.get(id);\n        if (!node) {\n            console.warn('012', errorMessages['error012'](id));\n            return;\n        }\n        store.selectionRect = null;\n        store.selectionRectMode = null;\n        if (!node.selected) {\n            addSelectedNodes([id]);\n        }\n        else if (unselect || (node.selected && store.multiselectionKeyPressed)) {\n            unselectNodesAndEdges({ nodes: [node], edges: [] });\n            requestAnimationFrame(() => nodeRef?.blur());\n        }\n    }\n    function handleEdgeSelection(id) {\n        const edge = store.edgeLookup.get(id);\n        if (!edge) {\n            console.warn('012', errorMessages['error012'](id));\n            return;\n        }\n        const selectable = edge.selectable || (store.elementsSelectable && typeof edge.selectable === 'undefined');\n        if (selectable) {\n            store.selectionRect = null;\n            store.selectionRectMode = null;\n            if (!edge.selected) {\n                addSelectedEdges([id]);\n            }\n            else if (edge.selected && store.multiselectionKeyPressed) {\n                unselectNodesAndEdges({ nodes: [], edges: [edge] });\n            }\n        }\n    }\n    function moveSelectedNodes(direction, factor) {\n        const { nodeExtent, snapGrid, nodeOrigin, nodeLookup, nodesDraggable, onerror } = store;\n        const nodeUpdates = new Map();\n        /*\n         * by default a node moves 5px on each key press\n         * if snap grid is enabled, we use that for the velocity\n         */\n        const xVelo = snapGrid?.[0] ?? 5;\n        const yVelo = snapGrid?.[1] ?? 5;\n        const xDiff = direction.x * xVelo * factor;\n        const yDiff = direction.y * yVelo * factor;\n        for (const node of nodeLookup.values()) {\n            const isSelected = node.selected &&\n                (node.draggable || (nodesDraggable && typeof node.draggable === 'undefined'));\n            if (!isSelected) {\n                continue;\n            }\n            let nextPosition = {\n                x: node.internals.positionAbsolute.x + xDiff,\n                y: node.internals.positionAbsolute.y + yDiff\n            };\n            if (snapGrid) {\n                nextPosition = snapPosition(nextPosition, snapGrid);\n            }\n            const { position, positionAbsolute } = calculateNodePosition({\n                nodeId: node.id,\n                nextPosition,\n                nodeLookup,\n                nodeExtent,\n                nodeOrigin,\n                onError: onerror\n            });\n            node.position = position;\n            node.internals.positionAbsolute = positionAbsolute;\n            nodeUpdates.set(node.id, node);\n        }\n        updateNodePositions(nodeUpdates);\n    }\n    function panBy(delta) {\n        return panBySystem({\n            delta,\n            panZoom: store.panZoom,\n            transform: [store.viewport.x, store.viewport.y, store.viewport.zoom],\n            translateExtent: store.translateExtent,\n            width: store.width,\n            height: store.height\n        });\n    }\n    const updateConnection = (newConnection) => {\n        store._connection = { ...newConnection };\n    };\n    function cancelConnection() {\n        store._connection = initialConnection;\n    }\n    function reset() {\n        store.resetStoreValues();\n        unselectNodesAndEdges();\n    }\n    const storeWithActions = Object.assign(store, {\n        setNodeTypes,\n        setEdgeTypes,\n        addEdge,\n        updateNodePositions,\n        updateNodeInternals,\n        zoomIn,\n        zoomOut,\n        fitView,\n        setCenter,\n        setMinZoom,\n        setMaxZoom,\n        setTranslateExtent,\n        setPaneClickDistance,\n        unselectNodesAndEdges,\n        addSelectedNodes,\n        addSelectedEdges,\n        handleNodeSelection,\n        handleEdgeSelection,\n        moveSelectedNodes,\n        panBy,\n        updateConnection,\n        cancelConnection,\n        reset\n    });\n    return storeWithActions;\n}\n", "import { PanOnScrollMode, XYPanZoom } from '@xyflow/system';\nexport default function zoom(domNode, params) {\n    const { minZoom, maxZoom, initialViewport, translateExtent, paneClickDistance, setPanZoomInstance, onDraggingChange, onTransformChange } = params;\n    const panZoomInstance = XYPanZoom({\n        domNode,\n        minZoom,\n        maxZoom,\n        translateExtent,\n        viewport: initialViewport,\n        paneClickDistance,\n        onDraggingChange\n    });\n    const viewport = panZoomInstance.getViewport();\n    if (initialViewport.x !== viewport.x ||\n        initialViewport.y !== viewport.y ||\n        initialViewport.zoom !== viewport.zoom) {\n        onTransformChange([viewport.x, viewport.y, viewport.zoom]);\n    }\n    setPanZoomInstance(panZoomInstance);\n    panZoomInstance.update(params);\n    return {\n        update(params) {\n            panZoomInstance.update(params);\n        }\n    };\n}\n", "<script lang=\"ts\" generics=\"NodeType extends Node = Node, EdgeType extends Edge = Edge\">\n  import { PanOnScrollMode, type PanZoomInstance, type Transform } from '@xyflow/system';\n\n  import zoom from '../../actions/zoom';\n  import type { ZoomProps } from './types';\n  import type { Node, Edge } from '../../types';\n\n  let {\n    store = $bindable(),\n    panOnScrollMode = PanOnScrollMode.Free,\n    preventScrolling = true,\n    zoomOnScroll = true,\n    zoomOnDoubleClick = true,\n    zoomOnPinch = true,\n    panOnDrag = true,\n    panOnScroll = false,\n    paneClickDistance = 1,\n    onmovestart,\n    onmove,\n    onmoveend,\n    oninit,\n    children\n  }: ZoomProps<NodeType, EdgeType> = $props();\n\n  let panOnDragActive = $derived(store.panActivationKeyPressed || panOnDrag);\n  let panOnScrollActive = $derived(store.panActivationKeyPressed || panOnScroll);\n\n  // We extract the initial value by destructuring\n  const { viewport: initialViewport } = store;\n\n  let onInitCalled = false;\n  $effect(() => {\n    if (!onInitCalled && store.viewportInitialized) {\n      oninit?.();\n      onInitCalled = true;\n    }\n  });\n</script>\n\n<div\n  class=\"svelte-flow__zoom svelte-flow__container\"\n  use:zoom={{\n    viewport: store.viewport,\n    minZoom: store.minZoom,\n    maxZoom: store.maxZoom,\n    initialViewport,\n    onDraggingChange: (dragging: boolean) => {\n      store.dragging = dragging;\n    },\n    setPanZoomInstance: (instance: PanZoomInstance) => {\n      store.panZoom = instance;\n    },\n    onPanZoomStart: onmovestart,\n    onPanZoom: onmove,\n    onPanZoomEnd: onmoveend,\n    zoomOnScroll,\n    zoomOnDoubleClick,\n    zoomOnPinch,\n    panOnScroll: panOnScrollActive,\n    panOnDrag: panOnDragActive,\n    panOnScrollSpeed: 0.5,\n    panOnScrollMode: panOnScrollMode || PanOnScrollMode.Free,\n    zoomActivationKeyPressed: store.zoomActivationKeyPressed,\n    preventScrolling: typeof preventScrolling === 'boolean' ? preventScrolling : true,\n    noPanClassName: store.noPanClass,\n    noWheelClassName: store.noWheelClass,\n    userSelectionActive: !!store.selectionRect,\n    translateExtent: store.translateExtent,\n    lib: 'svelte',\n    paneClickDistance,\n    onTransformChange: (transform: Transform) => {\n      store.viewport = { x: transform[0], y: transform[1], zoom: transform[2] };\n    }\n  }}\n>\n  {@render children()}\n</div>\n", "<script lang=\"ts\" module>\n  export function wrapHandler(\n    handler: (evt: MouseEvent) => void,\n    container: HTMLDivElement\n  ): (evt: MouseEvent) => void {\n    return (event: MouseEvent) => {\n      if (event.target !== container) {\n        return;\n      }\n      handler?.(event);\n    };\n  }\n\n  export function toggleSelected<Item extends Node | Edge>(ids: Set<string>) {\n    return (item: Item) => {\n      const isSelected = ids.has(item.id);\n\n      if (!!item.selected !== isSelected) {\n        return { ...item, selected: isSelected };\n      }\n\n      return item;\n    };\n  }\n\n  function isSetEqual(a: Set<string>, b: Set<string>) {\n    if (a.size !== b.size) {\n      return false;\n    }\n\n    for (const item of a) {\n      if (!b.has(item)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n</script>\n\n<script lang=\"ts\" generics=\"NodeType extends Node = Node, EdgeType extends Edge = Edge\">\n  import { SelectionMode, getEventPosition, getNodesInside } from '@xyflow/system';\n\n  import type { Node, Edge } from '../../types';\n  import type { PaneProps } from './types';\n\n  let {\n    store = $bindable(),\n    panOnDrag = true,\n    selectionOnDrag,\n    onpaneclick,\n    onpanecontextmenu,\n    onselectionstart,\n    onselectionend,\n    children\n  }: PaneProps<NodeType, EdgeType> = $props();\n\n  // svelte-ignore non_reactive_update\n  let container: HTMLDivElement;\n  let containerBounds: DOMRect | null = null;\n\n  let selectedNodeIds: Set<string> = new Set();\n  let selectedEdgeIds: Set<string> = new Set();\n\n  let panOnDragActive = $derived(store.panActivationKeyPressed || panOnDrag);\n  let isSelecting = $derived(\n    store.selectionKeyPressed ||\n      store.selectionRect ||\n      (selectionOnDrag && panOnDragActive !== true)\n  );\n  let hasActiveSelection = $derived(\n    store.elementsSelectable && (isSelecting || store.selectionRectMode === 'user')\n  );\n\n  // Used to prevent click events when the user lets go of the selectionKey during a selection\n  let selectionInProgress = false;\n\n  function onClick(event: MouseEvent) {\n    // We prevent click events when the user let go of the selectionKey during a selection\n    // We also prevent click events when a connection is in progress\n    if (selectionInProgress || store.connection.inProgress) {\n      selectionInProgress = false;\n      return;\n    }\n\n    onpaneclick?.({ event });\n    store.unselectNodesAndEdges();\n    store.selectionRectMode = null;\n  }\n\n  // We start the selection process when the user clicks down on the pane\n  function onPointerDown(event: PointerEvent) {\n    containerBounds = container?.getBoundingClientRect();\n\n    if (\n      !store.elementsSelectable ||\n      !isSelecting ||\n      event.button !== 0 ||\n      event.target !== container ||\n      !containerBounds\n    ) {\n      return;\n    }\n\n    (event.target as Partial<Element> | null)?.setPointerCapture?.(event.pointerId);\n\n    const { x, y } = getEventPosition(event, containerBounds);\n\n    store.unselectNodesAndEdges();\n\n    store.selectionRect = {\n      width: 0,\n      height: 0,\n      startX: x,\n      startY: y,\n      x,\n      y\n    };\n\n    onselectionstart?.(event);\n  }\n\n  function onPointerMove(event: PointerEvent) {\n    if (!isSelecting || !containerBounds || !store.selectionRect) {\n      return;\n    }\n\n    selectionInProgress = true;\n\n    const mousePos = getEventPosition(event, containerBounds);\n    const { startX = 0, startY = 0 } = store.selectionRect;\n\n    const nextUserSelectRect = {\n      ...store.selectionRect,\n      x: mousePos.x < startX ? mousePos.x : startX,\n      y: mousePos.y < startY ? mousePos.y : startY,\n      width: Math.abs(mousePos.x - startX),\n      height: Math.abs(mousePos.y - startY)\n    };\n\n    const prevSelectedNodeIds = selectedNodeIds;\n    const prevSelectedEdgeIds = selectedEdgeIds;\n\n    selectedNodeIds = new Set(\n      getNodesInside(\n        store.nodeLookup,\n        nextUserSelectRect,\n        [store.viewport.x, store.viewport.y, store.viewport.zoom],\n        store.selectionMode === SelectionMode.Partial,\n        true\n      ).map((n) => n.id)\n    );\n\n    const edgesSelectable = store.defaultEdgeOptions.selectable ?? true;\n    selectedEdgeIds = new Set();\n\n    // We look for all edges connected to the selected nodes\n    for (const nodeId of selectedNodeIds) {\n      const connections = store.connectionLookup.get(nodeId);\n      if (!connections) continue;\n      for (const { edgeId } of connections.values()) {\n        const edge = store.edgeLookup.get(edgeId);\n        if (edge && (edge.selectable ?? edgesSelectable)) {\n          selectedEdgeIds.add(edgeId);\n        }\n      }\n    }\n\n    // this prevents unnecessary updates while updating the selection rectangle\n    if (!isSetEqual(prevSelectedNodeIds, selectedNodeIds)) {\n      store.nodes = store.nodes.map(toggleSelected(selectedNodeIds));\n    }\n\n    if (!isSetEqual(prevSelectedEdgeIds, selectedEdgeIds)) {\n      store.edges = store.edges.map(toggleSelected(selectedEdgeIds));\n    }\n\n    store.selectionRectMode = 'user';\n    store.selectionRect = nextUserSelectRect;\n  }\n\n  function onPointerUp(event: PointerEvent) {\n    if (event.button !== 0) {\n      return;\n    }\n\n    (event.target as Partial<Element> | null)?.releasePointerCapture?.(event.pointerId);\n\n    // We only want to trigger click functions when in selection mode if\n    // the user did not move the mouse.\n    if (!isSelecting && store.selectionRectMode === 'user' && event.target === container) {\n      onClick?.(event);\n    }\n    store.selectionRect = null;\n\n    if (selectedNodeIds.size > 0) {\n      store.selectionRectMode = 'nodes';\n    }\n\n    // If the user kept holding the selectionKey during the selection,\n    // we need to reset the selectionInProgress, so the next click event is not prevented\n    if (store.selectionKeyPressed) {\n      selectionInProgress = false;\n    }\n\n    onselectionend?.(event);\n  }\n\n  const onContextMenu = (event: MouseEvent) => {\n    if (Array.isArray(panOnDragActive) && panOnDragActive.includes(2)) {\n      event.preventDefault();\n      return;\n    }\n\n    onpanecontextmenu?.({ event });\n  };\n</script>\n\n<!-- svelte-ignore a11y_no_static_element_interactions -->\n<!-- svelte-ignore a11y_click_events_have_key_events -->\n<div\n  bind:this={container}\n  class=\"svelte-flow__pane svelte-flow__container\"\n  class:draggable={panOnDrag === true || (Array.isArray(panOnDrag) && panOnDrag.includes(0))}\n  class:dragging={store.dragging}\n  class:selection={isSelecting}\n  onclick={hasActiveSelection ? undefined : wrapHandler(onClick, container)}\n  onpointerdown={hasActiveSelection ? onPointerDown : undefined}\n  onpointermove={hasActiveSelection ? onPointerMove : undefined}\n  onpointerup={hasActiveSelection ? onPointerUp : undefined}\n  oncontextmenu={wrapHandler(onContextMenu, container)}\n>\n  {@render children()}\n</div>\n", "<script lang=\"ts\" generics=\"NodeType extends Node = Node, EdgeType extends Edge = Edge\">\n  import type { SvelteFlowStore } from '../../store/types';\n  import type { Node, Edge } from '../../types';\n  import type { Snippet } from 'svelte';\n\n  let {\n    store = $bindable(),\n    children\n  }: { store: SvelteFlowStore<NodeType, EdgeType>; children: Snippet } = $props();\n</script>\n\n<div\n  class=\"svelte-flow__viewport xyflow__viewport svelte-flow__container\"\n  style:transform=\"translate({store.viewport.x}px, {store.viewport.y}px) scale({store.viewport\n    .zoom})\"\n>\n  {@render children()}\n</div>\n", "import { XYDrag } from '@xyflow/system';\nexport default function drag(domNode, params) {\n    const { store, onDrag, onDragStart, onDragStop, onNodeMouseDown } = params;\n    const dragInstance = XYDrag({\n        onDrag,\n        onDragStart,\n        onDragStop,\n        onNodeMouseDown,\n        getStoreItems: () => {\n            const { snapGrid, viewport } = store;\n            return {\n                nodes: store.nodes,\n                nodeLookup: store.nodeLookup,\n                edges: store.edges,\n                nodeExtent: store.nodeExtent,\n                snapGrid: snapGrid ? snapGrid : [0, 0],\n                snapToGrid: !!snapGrid,\n                nodeOrigin: store.nodeOrigin,\n                multiSelectionActive: store.multiselectionKeyPressed,\n                domNode: store.domNode,\n                transform: [viewport.x, viewport.y, viewport.zoom],\n                autoPanOnNodeDrag: store.autoPanOnNodeDrag,\n                nodesDraggable: store.nodesDraggable,\n                selectNodesOnDrag: store.selectNodesOnDrag,\n                nodeDragThreshold: store.nodeDragThreshold,\n                unselectNodesAndEdges: store.unselectNodesAndEdges,\n                updateNodePositions: store.updateNodePositions,\n                onSelectionDrag: store.onselectiondrag,\n                onSelectionDragStart: store.onselectiondragstart,\n                onSelectionDragStop: store.onselectiondragstop,\n                panBy: store.panBy\n            };\n        }\n    });\n    function updateDrag(domNode, params) {\n        if (params.disabled) {\n            dragInstance.destroy();\n            return;\n        }\n        dragInstance.update({\n            domNode,\n            noDragClassName: params.noDragClass,\n            handleSelector: params.handleSelector,\n            nodeId: params.nodeId,\n            isSelectable: params.isSelectable,\n            nodeClickDistance: params.nodeClickDistance\n        });\n    }\n    updateDrag(domNode, params);\n    return {\n        update(params) {\n            updateDrag(domNode, params);\n        },\n        destroy() {\n            dragInstance.destroy();\n        }\n    };\n}\n", "<script lang=\"ts\" generics=\"NodeType extends Node = Node, EdgeType extends Edge = Edge\">\n  import type { SvelteFlowStore } from '../../store/types';\n  import type { Node, Edge } from '../../types';\n  import { ARIA_EDGE_DESC_KEY, ARIA_LIVE_MESSAGE, ARIA_NODE_DESC_KEY } from '.';\n\n  let { store }: { store: SvelteFlowStore<NodeType, EdgeType> } = $props();\n</script>\n\n<div id={`${ARIA_NODE_DESC_KEY}-${store.flowId}`} class=\"a11y-hidden\">\n  {store.disableKeyboardA11y\n    ? store.ariaLabelConfig['node.a11yDescription.default']\n    : store.ariaLabelConfig['node.a11yDescription.keyboardDisabled']}\n</div>\n<div id={`${ARIA_EDGE_DESC_KEY}-${store.flowId}`} class=\"a11y-hidden\">\n  {store.ariaLabelConfig['edge.a11yDescription.default']}\n</div>\n\n{#if !store.disableKeyboardA11y}\n  <div\n    id={`${ARIA_LIVE_MESSAGE}-${store.flowId}`}\n    aria-live=\"assertive\"\n    aria-atomic=\"true\"\n    class=\"a11y-live-msg\"\n  >\n    {store.ariaLiveMessage}\n  </div>\n{/if}\n\n<style>\n  .a11y-hidden {\n    display: none;\n  }\n\n  .a11y-live-msg {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    margin: -1px;\n    border: 0;\n    padding: 0;\n    overflow: hidden;\n    clip: rect(0px, 0px, 0px, 0px);\n    clip-path: inset(100%);\n  }\n</style>\n", "export { default as A11yDescriptions } from './A11yDescriptions.svelte';\nexport const ARIA_NODE_DESC_KEY = 'svelte-flow__node-desc';\nexport const ARIA_EDGE_DESC_KEY = 'svelte-flow__edge-desc';\nexport const ARIA_LIVE_MESSAGE = 'svelte-flow__aria-live';\n", "<script lang=\"ts\" generics=\"NodeType extends Node = Node, EdgeType extends Edge = Edge\">\n  import { setContext, onDestroy } from 'svelte';\n  import {\n    elementSelectionKeys,\n    errorMessages,\n    isInputDOMNode,\n    nodeHasDimensions,\n    Position,\n    getNodesInside\n  } from '@xyflow/system';\n\n  import drag from '../../actions/drag';\n  import DefaultNode from '../nodes/DefaultNode.svelte';\n\n  import type { ConnectableContext, NodeWrapperProps } from './types';\n  import type { Node, Edge, NodeEvents } from '../../types';\n  import { arrowKeyDiffs, toPxString } from '../../utils';\n  import { ARIA_NODE_DESC_KEY } from '../A11yDescriptions';\n\n  let {\n    store = $bindable(),\n    node,\n    resizeObserver,\n    nodeClickDistance,\n    onnodeclick,\n    onnodedrag,\n    onnodedragstart,\n    onnodedragstop,\n    onnodepointerenter,\n    onnodepointerleave,\n    onnodepointermove,\n    onnodecontextmenu\n  }: NodeWrapperProps<NodeType, EdgeType> & NodeEvents<NodeType> = $props();\n\n  let {\n    data = {},\n    selected = false,\n    draggable: _draggable,\n    selectable: _selectable,\n    deletable = true,\n    connectable: _connectable,\n    focusable: _focusable,\n    hidden = false,\n    dragging = false,\n    style = '',\n    class: className,\n    type = 'default',\n    parentId,\n    sourcePosition,\n    targetPosition,\n    measured: { width: measuredWidth, height: measuredHeight } = { width: 0, height: 0 },\n    initialWidth,\n    initialHeight,\n    width,\n    height,\n    dragHandle,\n    internals: {\n      z: zIndex = 0,\n      positionAbsolute: { x: positionX, y: positionY },\n      userNode\n    }\n  } = $derived(node);\n\n  let { id } = node;\n\n  let draggable = $derived(_draggable ?? store.nodesDraggable);\n  let selectable = $derived(_selectable ?? store.elementsSelectable);\n  let connectable = $derived(_connectable ?? store.nodesConnectable);\n  let hasDimensions = $derived(nodeHasDimensions(node));\n  let hasHandleBounds = $derived(!!node.internals.handleBounds);\n  let isInitialized = $derived(hasDimensions && hasHandleBounds);\n  let focusable = $derived(_focusable ?? store.nodesFocusable);\n\n  function isInParentLookup(id: string) {\n    return store.parentLookup.has(id);\n  }\n\n  let isParent = $derived(isInParentLookup(id));\n\n  let nodeRef: HTMLDivElement | null = $state(null);\n  let prevNodeRef: HTMLDivElement | null = null;\n\n  // svelte-ignore state_referenced_locally\n  let prevType: string | undefined = type;\n  // svelte-ignore state_referenced_locally\n  let prevSourcePosition: Position | undefined = sourcePosition;\n  // svelte-ignore state_referenced_locally\n  let prevTargetPosition: Position | undefined = targetPosition;\n\n  let NodeComponent = $derived(store.nodeTypes[type] ?? DefaultNode);\n  let ariaLabelConfig = $derived(store.ariaLabelConfig);\n\n  let connectableContext: ConnectableContext = {\n    get value() {\n      return connectable;\n    }\n  };\n  setContext('svelteflow__node_connectable', connectableContext);\n  setContext('svelteflow__node_id', id);\n\n  if (process.env.NODE_ENV === 'development') {\n    $effect(() => {\n      const valid = !!store.nodeTypes[type];\n      if (!valid) {\n        console.warn('003', errorMessages['error003'](type!));\n      }\n    });\n  }\n\n  let nodeStyle = $derived.by(() => {\n    const w = measuredWidth === undefined ? (width ?? initialWidth) : width;\n    const h = measuredHeight === undefined ? (height ?? initialHeight) : height;\n\n    if (w === undefined && h === undefined && style === undefined) {\n      return undefined;\n    }\n\n    return `${style};${w ? `width:${toPxString(w)};` : ''}${h ? `height:${toPxString(h)};` : ''}`;\n  });\n\n  $effect(() => {\n    // if type, sourcePosition or targetPosition changes,\n    // we need to re-calculate the handle positions\n    const doUpdate =\n      type !== prevType ||\n      sourcePosition !== prevSourcePosition ||\n      targetPosition !== prevTargetPosition;\n\n    if (doUpdate && nodeRef !== null) {\n      requestAnimationFrame(() => {\n        if (nodeRef !== null) {\n          store.updateNodeInternals(\n            new Map([\n              [\n                id,\n                {\n                  id,\n                  nodeElement: nodeRef,\n                  force: true\n                }\n              ]\n            ])\n          );\n        }\n      });\n    }\n\n    prevType = type;\n    prevSourcePosition = sourcePosition;\n    prevTargetPosition = targetPosition;\n  });\n\n  $effect(() => {\n    /* eslint-disable @typescript-eslint/no-unused-expressions */\n    if (resizeObserver && (!isInitialized || nodeRef !== prevNodeRef)) {\n      prevNodeRef && resizeObserver.unobserve(prevNodeRef);\n      nodeRef && resizeObserver.observe(nodeRef);\n      prevNodeRef = nodeRef;\n    }\n    /* eslint-enable @typescript-eslint/no-unused-expressions */\n  });\n\n  onDestroy(() => {\n    if (prevNodeRef) {\n      resizeObserver?.unobserve(prevNodeRef);\n    }\n  });\n\n  function onSelectNodeHandler(event: MouseEvent | TouchEvent) {\n    if (selectable && (!store.selectNodesOnDrag || !draggable || store.nodeDragThreshold > 0)) {\n      // this handler gets called by XYDrag on drag start when selectNodesOnDrag=true\n      // here we only need to call it when selectNodesOnDrag=false\n      store.handleNodeSelection(id);\n    }\n\n    onnodeclick?.({ node: userNode, event });\n  }\n\n  function onKeyDown(event: KeyboardEvent) {\n    if (isInputDOMNode(event) || store.disableKeyboardA11y) {\n      return;\n    }\n\n    if (elementSelectionKeys.includes(event.key) && selectable) {\n      const unselect = event.key === 'Escape';\n\n      store.handleNodeSelection(id, unselect, nodeRef);\n    } else if (\n      draggable &&\n      node.selected &&\n      Object.prototype.hasOwnProperty.call(arrowKeyDiffs, event.key)\n    ) {\n      // prevent default scrolling behavior on arrow key press when node is moved\n      event.preventDefault();\n      store.ariaLiveMessage = ariaLabelConfig['node.a11yDescription.ariaLiveMessage']({\n        direction: event.key.replace('Arrow', '').toLowerCase(),\n        x: ~~node.internals.positionAbsolute.x,\n        y: ~~node.internals.positionAbsolute.y\n      });\n      store.moveSelectedNodes(arrowKeyDiffs[event.key], event.shiftKey ? 4 : 1);\n    }\n  }\n\n  const onFocus = () => {\n    if (\n      store.disableKeyboardA11y ||\n      !store.autoPanOnNodeFocus ||\n      !nodeRef?.matches(':focus-visible')\n    ) {\n      return;\n    }\n\n    const { width, height, viewport } = store;\n\n    const withinViewport =\n      getNodesInside(\n        new Map([[id, node]]),\n        { x: 0, y: 0, width, height },\n        [viewport.x, viewport.y, viewport.zoom],\n        true\n      ).length > 0;\n\n    if (!withinViewport) {\n      store.setCenter(\n        node.position.x + (node.measured.width ?? 0) / 2,\n        node.position.y + (node.measured.height ?? 0) / 2,\n        { zoom: viewport.zoom }\n      );\n    }\n  };\n</script>\n\n{#if !hidden}\n  <div\n    use:drag={{\n      nodeId: id,\n      isSelectable: selectable,\n      disabled: !draggable,\n      handleSelector: dragHandle,\n      noDragClass: store.noDragClass,\n      nodeClickDistance,\n      onNodeMouseDown: store.handleNodeSelection,\n      onDrag: (event, _, targetNode, nodes) => {\n        onnodedrag?.({ event, targetNode: targetNode as NodeType, nodes: nodes as NodeType[] });\n      },\n      onDragStart: (event, _, targetNode, nodes) => {\n        onnodedragstart?.({\n          event,\n          targetNode: targetNode as NodeType,\n          nodes: nodes as NodeType[]\n        });\n      },\n      onDragStop: (event, _, targetNode, nodes) => {\n        onnodedragstop?.({ event, targetNode: targetNode as NodeType, nodes: nodes as NodeType[] });\n      },\n      store\n    }}\n    bind:this={nodeRef}\n    data-id={id}\n    class={['svelte-flow__node', `svelte-flow__node-${type}`, className]}\n    class:dragging\n    class:selected\n    class:draggable\n    class:connectable\n    class:selectable\n    class:nopan={draggable}\n    class:parent={isParent}\n    style:z-index={zIndex}\n    style:transform=\"translate({positionX}px, {positionY}px)\"\n    style:visibility={hasDimensions ? 'visible' : 'hidden'}\n    style={nodeStyle}\n    onclick={onSelectNodeHandler}\n    onpointerenter={onnodepointerenter\n      ? (event) => onnodepointerenter({ node: userNode, event })\n      : undefined}\n    onpointerleave={onnodepointerleave\n      ? (event) => onnodepointerleave({ node: userNode, event })\n      : undefined}\n    onpointermove={onnodepointermove\n      ? (event) => onnodepointermove({ node: userNode, event })\n      : undefined}\n    oncontextmenu={onnodecontextmenu\n      ? (event) => onnodecontextmenu({ node: userNode, event })\n      : undefined}\n    onkeydown={focusable ? onKeyDown : undefined}\n    onfocus={focusable ? onFocus : undefined}\n    tabIndex={focusable ? 0 : undefined}\n    role={node.ariaRole ?? (focusable ? 'group' : undefined)}\n    aria-roledescription=\"node\"\n    aria-describedby={store.disableKeyboardA11y\n      ? undefined\n      : `${ARIA_NODE_DESC_KEY}-${store.flowId}`}\n    {...node.domAttributes}\n  >\n    <NodeComponent\n      {data}\n      {id}\n      {selected}\n      {selectable}\n      {deletable}\n      {sourcePosition}\n      {targetPosition}\n      {zIndex}\n      {dragging}\n      {draggable}\n      {dragHandle}\n      {parentId}\n      {type}\n      isConnectable={connectable}\n      positionAbsoluteX={positionX}\n      positionAbsoluteY={positionY}\n      {width}\n      {height}\n    />\n  </div>\n{/if}\n", "<script lang=\"ts\" generics=\"NodeType extends Node = Node, EdgeType extends Edge = Edge\">\n  import { onDestroy } from 'svelte';\n\n  import { NodeWrapper } from '../../components/NodeWrapper';\n\n  import type { Node, Edge, NodeEvents } from '../../types';\n  import type { SvelteFlowStore } from '../../store/types';\n\n  let {\n    store = $bindable(),\n    nodeClickDistance,\n    onnodeclick,\n    onnodecontextmenu,\n    onnodepointerenter,\n    onnodepointermove,\n    onnodepointerleave,\n    onnodedrag,\n    onnodedragstart,\n    onnodedragstop\n  }: {\n    store: SvelteFlowStore<NodeType, EdgeType>;\n    nodeClickDistance?: number;\n  } & NodeEvents<NodeType> = $props();\n\n  const resizeObserver: ResizeObserver | null =\n    typeof ResizeObserver === 'undefined'\n      ? null\n      : new ResizeObserver((entries: ResizeObserverEntry[]) => {\n          const updates = new Map();\n\n          entries.forEach((entry: ResizeObserverEntry) => {\n            const id = entry.target.getAttribute('data-id') as string;\n\n            updates.set(id, {\n              id,\n              nodeElement: entry.target as HTMLDivElement,\n              force: true\n            });\n          });\n\n          store.updateNodeInternals(updates);\n        });\n\n  onDestroy(() => {\n    resizeObserver?.disconnect();\n  });\n</script>\n\n<div class=\"svelte-flow__nodes\">\n  {#each store.visible.nodes.values() as node (node.id)}\n    <NodeWrapper\n      bind:store\n      {node}\n      {resizeObserver}\n      {nodeClickDistance}\n      {onnodeclick}\n      {onnodepointerenter}\n      {onnodepointermove}\n      {onnodepointerleave}\n      {onnodedrag}\n      {onnodedragstart}\n      {onnodedragstop}\n      {onnodecontextmenu}\n    />\n  {/each}\n</div>\n", "<script lang=\"ts\" generics=\"NodeType extends Node = Node, EdgeType extends Edge = Edge\">\n  import { setContext } from 'svelte';\n\n  import { elementSelectionKeys, getMarkerId } from '@xyflow/system';\n\n  import { BezierEdgeInternal } from '../edges';\n\n  import type { Node, EdgeLayouted, Edge, EdgeEvents } from '../../types';\n  import type { SvelteFlowStore } from '../../store/types';\n  import { ARIA_EDGE_DESC_KEY } from '../A11yDescriptions';\n\n  const {\n    edge,\n    store = $bindable(),\n    onedgeclick,\n    onedgecontextmenu,\n    onedgepointerenter,\n    onedgepointerleave\n  }: {\n    store: SvelteFlowStore<NodeType, EdgeType>;\n    edge: EdgeLayouted<EdgeType>;\n  } & EdgeEvents<EdgeType> = $props();\n\n  let {\n    source,\n    target,\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourcePosition,\n    targetPosition,\n    animated = false,\n    selected = false,\n    label,\n    labelStyle,\n    data = {},\n    style,\n    interactionWidth,\n    type = 'default',\n    sourceHandle,\n    targetHandle,\n    markerStart,\n    markerEnd,\n    selectable: _selectable,\n    focusable: _focusable,\n    deletable = true,\n    hidden,\n    zIndex,\n    class: className,\n    ariaLabel\n  } = $derived(edge);\n\n  // svelte-ignore non_reactive_update\n  let edgeRef: SVGGElement | null = null;\n\n  const { id } = edge;\n  setContext('svelteflow__edge_id', id);\n\n  let selectable = $derived(_selectable ?? store.elementsSelectable);\n  let focusable = $derived(_focusable ?? store.edgesFocusable);\n\n  let EdgeComponent = $derived(store.edgeTypes[type] ?? BezierEdgeInternal);\n\n  let markerStartUrl = $derived(\n    markerStart ? `url('#${getMarkerId(markerStart, store.flowId)}')` : undefined\n  );\n  let markerEndUrl = $derived(\n    markerEnd ? `url('#${getMarkerId(markerEnd, store.flowId)}')` : undefined\n  );\n\n  function onclick(event: MouseEvent) {\n    const edge = store.edgeLookup.get(id);\n\n    if (edge) {\n      if (selectable) store.handleEdgeSelection(id);\n      onedgeclick?.({ event, edge });\n    }\n  }\n\n  function onmouseevent<T = MouseEvent>(\n    event: T,\n    callback: ({ edge, event }: { edge: EdgeType; event: T }) => void\n  ) {\n    const edge = store.edgeLookup.get(id);\n\n    if (edge) {\n      callback({ event, edge });\n    }\n  }\n\n  function onkeydown(event: KeyboardEvent) {\n    if (!store.disableKeyboardA11y && elementSelectionKeys.includes(event.key) && selectable) {\n      const { unselectNodesAndEdges, addSelectedEdges } = store;\n      const unselect = event.key === 'Escape';\n\n      if (unselect) {\n        edgeRef?.blur();\n        unselectNodesAndEdges({ edges: [edge] });\n      } else {\n        addSelectedEdges([id]);\n      }\n    }\n  }\n</script>\n\n<!-- svelte-ignore a11y_no_noninteractive_tabindex -->\n{#if !hidden}\n  <svg style:z-index={zIndex} class=\"svelte-flow__edge-wrapper\">\n    <g\n      bind:this={edgeRef}\n      class={['svelte-flow__edge', className]}\n      class:animated\n      class:selected\n      class:selectable\n      data-id={id}\n      {onclick}\n      oncontextmenu={onedgecontextmenu\n        ? (e) => {\n            onmouseevent(e, onedgecontextmenu);\n          }\n        : undefined}\n      onpointerenter={onedgepointerenter\n        ? (e) => {\n            onmouseevent(e, onedgepointerenter);\n          }\n        : undefined}\n      onpointerleave={onedgepointerleave\n        ? (e) => {\n            onmouseevent(e, onedgepointerleave);\n          }\n        : undefined}\n      aria-label={ariaLabel === null\n        ? undefined\n        : ariaLabel\n          ? ariaLabel\n          : `Edge from ${source} to ${target}`}\n      aria-describedby={focusable ? `${ARIA_EDGE_DESC_KEY}-${store.flowId}` : undefined}\n      role={edge.ariaRole ?? (focusable ? 'group' : 'img')}\n      aria-roledescription=\"edge\"\n      onkeydown={focusable ? onkeydown : undefined}\n      tabindex={focusable ? 0 : undefined}\n      {...edge.domAttributes}\n    >\n      <EdgeComponent\n        {id}\n        {source}\n        {target}\n        {sourceX}\n        {sourceY}\n        {targetX}\n        {targetY}\n        {sourcePosition}\n        {targetPosition}\n        {animated}\n        {selected}\n        {label}\n        {labelStyle}\n        {data}\n        {style}\n        {interactionWidth}\n        {selectable}\n        {deletable}\n        {type}\n        sourceHandleId={sourceHandle}\n        targetHandleId={targetHandle}\n        markerStart={markerStartUrl}\n        markerEnd={markerEndUrl}\n      />\n    </g>\n  </svg>\n{/if}\n", "<script lang=\"ts\">\n  import { useStore } from '../../../store';\n  import { Marker } from './';\n\n  const store = useStore();\n</script>\n\n<defs>\n  {#each store.markers as marker (marker.id)}\n    <Marker {...marker} />\n  {/each}\n</defs>\n", "<script lang=\"ts\">\n  import { type MarkerProps, MarkerType } from '@xyflow/system';\n\n  let {\n    id,\n    type,\n    width = 12.5,\n    height = 12.5,\n    markerUnits = 'strokeWidth',\n    orient = 'auto-start-reverse',\n    color,\n    strokeWidth\n  }: MarkerProps = $props();\n</script>\n\n<marker\n  class=\"svelte-flow__arrowhead\"\n  {id}\n  markerWidth={`${width}`}\n  markerHeight={`${height}`}\n  viewBox=\"-10 -10 20 20\"\n  {markerUnits}\n  {orient}\n  refX=\"0\"\n  refY=\"0\"\n>\n  {#if type === MarkerType.Arrow}\n    <polyline\n      stroke={color}\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      stroke-width={strokeWidth}\n      fill=\"none\"\n      points=\"-5,-4 0,0 -5,4\"\n    />\n  {:else if type === MarkerType.ArrowClosed}\n    <polyline\n      stroke={color}\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      stroke-width={strokeWidth}\n      fill={color}\n      points=\"-5,-4 0,0 -5,4 -5,-4\"\n    />\n  {/if}\n</marker>\n", "<script lang=\"ts\" generics=\"NodeType extends Node = Node, EdgeType extends Edge = Edge\">\n  import { EdgeWrapper } from '../../components/EdgeWrapper';\n  import { MarkerDefinition } from './MarkerDefinition';\n  import type { Node, Edge, EdgeEvents } from '../../types';\n  import type { SvelteFlowStore } from '../../store/types';\n\n  let {\n    store = $bindable(),\n    onedgeclick,\n    onedgecontextmenu,\n    onedgepointerenter,\n    onedgepointerleave\n  }: { store: SvelteFlowStore<NodeType, EdgeType> } & EdgeEvents<EdgeType> = $props();\n</script>\n\n<div class=\"svelte-flow__edges\">\n  <svg class=\"svelte-flow__marker\">\n    <MarkerDefinition />\n  </svg>\n\n  {#each store.visible.edges.values() as edge (edge.id)}\n    <EdgeWrapper\n      bind:store\n      {edge}\n      {onedgeclick}\n      {onedgecontextmenu}\n      {onedgepointerenter}\n      {onedgepointerleave}\n    />\n  {/each}\n</div>\n", "<script lang=\"ts\">\n  import { toPxString } from '../../utils';\n\n  let {\n    x = 0,\n    y = 0,\n    width = 0,\n    height = 0,\n    isVisible = true\n  }: {\n    x?: number;\n    y?: number;\n    width?: number | string;\n    height?: number | string;\n    isVisible?: boolean;\n  } = $props();\n</script>\n\n{#if isVisible}\n  <div\n    class=\"svelte-flow__selection\"\n    style:width={typeof width === 'string' ? width : toPxString(width)}\n    style:height={typeof height === 'string' ? height : toPxString(height)}\n    style:transform={`translate(${x}px, ${y}px)`}\n  ></div>\n{/if}\n\n<style>\n  .svelte-flow__selection {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n</style>\n", "<script lang=\"ts\" generics=\"NodeType extends Node = Node, EdgeType extends Edge = Edge\">\n  import { getInternalNodesBounds, isNumeric, type Rect } from '@xyflow/system';\n\n  import { Selection } from '../Selection';\n  import drag from '../../actions/drag';\n\n  import type { NodeSelectionProps } from './types';\n  import { arrowKeyDiffs, toPxString } from '../../utils';\n  import type { Node, Edge } from '../../types';\n\n  let {\n    store = $bindable(),\n    onnodedrag,\n    onnodedragstart,\n    onnodedragstop,\n    onselectionclick,\n    onselectioncontextmenu\n  }: NodeSelectionProps<NodeType, EdgeType> = $props();\n\n  let ref = $state<HTMLDivElement>();\n\n  $effect(() => {\n    if (!store.disableKeyboardA11y) {\n      ref?.focus({\n        preventScroll: true\n      });\n    }\n  });\n\n  let bounds: Rect | null = $derived.by(() => {\n    if (store.selectionRectMode === 'nodes') {\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n      store.nodes;\n      return getInternalNodesBounds(store.nodeLookup, { filter: (node) => !!node.selected });\n    }\n    return null;\n  });\n\n  function oncontextmenu(event: MouseEvent) {\n    const selectedNodes = store.nodes.filter((n) => n.selected);\n    onselectioncontextmenu?.({ nodes: selectedNodes, event });\n  }\n\n  function onclick(event: MouseEvent) {\n    const selectedNodes = store.nodes.filter((n) => n.selected);\n    onselectionclick?.({ nodes: selectedNodes, event });\n  }\n\n  function onkeydown(event: KeyboardEvent) {\n    if (Object.prototype.hasOwnProperty.call(arrowKeyDiffs, event.key)) {\n      event.preventDefault();\n      store.moveSelectedNodes(arrowKeyDiffs[event.key], event.shiftKey ? 4 : 1);\n    }\n  }\n</script>\n\n{#if store.selectionRectMode === 'nodes' && bounds && isNumeric(bounds.x) && isNumeric(bounds.y)}\n  <div\n    class={['svelte-flow__selection-wrapper', store.noPanClass]}\n    style:width={toPxString(bounds.width)}\n    style:height={toPxString(bounds.height)}\n    style:transform=\"translate({bounds.x}px, {bounds.y}px)\"\n    use:drag={{\n      disabled: false,\n      store,\n      onDrag: (event, _, __, nodes) => {\n        onnodedrag?.({ event, targetNode: null, nodes: nodes as NodeType[] });\n      },\n      onDragStart: (event, _, __, nodes) => {\n        onnodedragstart?.({ event, targetNode: null, nodes: nodes as NodeType[] });\n      },\n      onDragStop: (event, _, __, nodes) => {\n        onnodedragstop?.({ event, targetNode: null, nodes: nodes as NodeType[] });\n      }\n    }}\n    {oncontextmenu}\n    {onclick}\n    role={store.disableKeyboardA11y ? undefined : 'button'}\n    tabIndex={store.disableKeyboardA11y ? undefined : -1}\n    onkeydown={store.disableKeyboardA11y ? undefined : onkeydown}\n    bind:this={ref}\n  >\n    <Selection width=\"100%\" height=\"100%\" x={0} y={0} />\n  </div>\n{/if}\n\n<style>\n  .svelte-flow__selection-wrapper {\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 2000;\n    pointer-events: all;\n  }\n</style>\n", "import { on } from 'svelte/events';\n\n/**\n * @param {import('./types.public').ShortcutModifier} def\n * @returns {number}\n */\nfunction mapModifierToBitMask(def) {\n\tswitch (def) {\n\t\tcase 'ctrl':\n\t\t\treturn 0b1000;\n\t\tcase 'shift':\n\t\t\treturn 0b0100;\n\t\tcase 'alt':\n\t\t\treturn 0b0010;\n\t\tcase 'meta':\n\t\t\treturn 0b0001;\n\t}\n}\n\n/**\n * Listen for keyboard event and trigger `shortcut` {@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent | CustomEvent }\n * @example Typical usage\n *\n * ```svelte\n * <script lang=\"ts\">\n *  import { shortcut, type ShortcutEventDetail } from '@svelte-put/shortcut';\n *\n *  let commandPalette = false;\n *\n *  function onOpenCommandPalette() {\n *    commandPalette = true;\n *  }\n *  function onCloseCommandPalette() {\n *    commandPalette = false;\n *  }\n *\n *  function doSomethingElse(details: ShortcutEventDetail) {\n *    console.log('Action was placed on:', details.node);\n *    console.log('Trigger:', details.trigger);\n *  }\n *\n *  function onShortcut(event: CustomEvent<ShortcutEventDetail>) {\n *    if (event.detail.trigger.id === 'do-something-else') {\n *      console.log('Same as doSomethingElse()');\n *      // be careful here doSomethingElse would have been called too\n *   }\n * }\n * </script>\n *\n * <svelte:window\n *   use:shortcut={{\n *     trigger: [\n *       {\n *         key: 'k',\n *\n *         // trigger if either ctrl or meta is pressed\n *         modifier: ['ctrl', 'meta'],\n *\n *         callback: onOpenCommandPalette,\n *         preventDefault: true,\n *       },\n *       {\n *         key: 'Escape',\n *         modifier: false, // or any falsy value other than undefined to means 'expect no modifier'\n *\n *         // preferably avoid arrow functions here for better performance\n *         // with arrow functions the action has to be updated more frequently\n *         callback: onCloseCommandPalette,\n *\n *         enabled: commandPalette,\n *         preventDefault: true,\n *       },\n *      {\n *         key: 'k',\n *\n *         // trigger if both ctrl & shift are pressed\n *         modifier: [['ctrl', 'shift']],\n *         id: 'do-something-else',\n *         callback: doSomethingElse,\n *      },\n *     ],\n *   }}\n *   onshortcut={onShortcut}\n * />\n * ```\n * You can either:\n *\n * - pass multiple callbacks to their associated triggers, or\n *\n * - pass one single handler to the `onshortcut` event, in which case you should\n * provide an ID to each trigger to be able to distinguish what trigger was activated\n * in the event handler.\n *\n * Either way, only use `callback` or `onshortcut` and not both to\n * avoid handler duplication.\n * @param {HTMLElement} node - HTMLElement to add event listener to\n * @param {import('./types.public').ShortcutParameter} param - svelte action parameters\n * @returns {import('./types.public').ShortcutActionReturn}\n */\nexport function shortcut(node, param) {\n\tlet { enabled = true, trigger, type = 'keydown' } = param;\n\n\t/**\n\t * @param {KeyboardEvent} event\n\t */\n\tfunction handler(event) {\n\t\tconst normalizedTriggers = Array.isArray(trigger) ? trigger : [trigger];\n\t\tconst modifierMask = [event.metaKey, event.altKey, event.shiftKey, event.ctrlKey].reduce(\n\t\t\t(acc, value, index) => {\n\t\t\t\tif (value) {\n\t\t\t\t\treturn acc | (1 << index);\n\t\t\t\t}\n\t\t\t\treturn acc;\n\t\t\t},\n\t\t\t0b0000,\n\t\t);\n\t\tfor (const trigger of normalizedTriggers) {\n\t\t\tconst mergedTrigger = {\n\t\t\t\tpreventDefault: false,\n\t\t\t\tenabled: true,\n\t\t\t\t...trigger,\n\t\t\t};\n\t\t\tconst { modifier, key, callback, preventDefault, enabled: triggerEnabled } = mergedTrigger;\n\t\t\tif (triggerEnabled) {\n\t\t\t\tif (event.key !== key) continue;\n\n\t\t\t\tif (modifier === null || modifier === false) {\n\t\t\t\t\tif (modifierMask !== 0b0000) continue;\n\t\t\t\t} else if (\n\t\t\t\t\tmodifier !== undefined &&\n\t\t\t\t\tmodifier?.[0]?.length > 0\n\t\t\t\t) {\n\t\t\t\t\tconst orDefs = Array.isArray(modifier) ? modifier : [modifier];\n\t\t\t\t\tlet modified = false;\n\t\t\t\t\tfor (const orDef of orDefs) {\n\t\t\t\t\t\tconst mask = (Array.isArray(orDef) ? orDef : [orDef]).reduce(\n\t\t\t\t\t\t\t(acc, def) => acc | mapModifierToBitMask(def),\n\t\t\t\t\t\t\t0b0000,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (mask === modifierMask) {\n\t\t\t\t\t\t\tmodified = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!modified) continue;\n\t\t\t\t}\n\n\t\t\t\tif (preventDefault) event.preventDefault();\n\t\t\t\t/** @type {import('./types.public').ShortcutEventDetail} */\n\t\t\t\tconst detail = {\n\t\t\t\t\tnode,\n\t\t\t\t\ttrigger: mergedTrigger,\n\t\t\t\t\toriginalEvent: event,\n\t\t\t\t};\n\t\t\t\tnode.dispatchEvent(new CustomEvent('shortcut', { detail }));\n\t\t\t\tcallback?.(detail);\n\t\t\t}\n\t\t}\n\t}\n\n\t/** @type {undefined | (() => void)} */\n\tlet off;\n\tif (enabled) {\n\t\toff = on(node, type, handler);\n\t}\n\n\treturn {\n\t\tupdate: (update) => {\n\t\t\tconst { enabled: newEnabled = true, type: newType = 'keydown' } = update;\n\n\t\t\tif (enabled && (!newEnabled || type !== newType)) {\n\t\t\t\toff?.();\n\t\t\t} else if (!enabled && newEnabled) {\n\t\t\t\toff = on(node, newType, handler);\n\t\t\t}\n\n\t\t\tenabled = newEnabled;\n\t\t\ttype = newType;\n\t\t\ttrigger = update.trigger;\n\t\t},\n\t\tdestroy: () => {\n\t\t\toff?.();\n\t\t},\n\t};\n}\n", "import { getOverlappingArea, isRectObject, nodeToRect, pointToRendererPoint, getViewportForBounds, getElementsToRemove, rendererPointToPoint, evaluateAbsolutePosition, getNodesBounds } from '@xyflow/system';\nimport { useStore } from '../store';\nimport { isEdge, isNode } from '../utils';\nimport { untrack } from 'svelte';\n/**\n * Hook for accessing the SvelteFlow instance.\n *\n * @public\n * @returns A set of helper functions\n */\nexport function useSvelteFlow() {\n    const store = $derived(useStore());\n    const getNodeRect = (node) => {\n        const nodeToUse = isNode(node) ? node : store.nodeLookup.get(node.id);\n        const position = nodeToUse.parentId\n            ? evaluateAbsolutePosition(nodeToUse.position, nodeToUse.measured, nodeToUse.parentId, store.nodeLookup, store.nodeOrigin)\n            : nodeToUse.position;\n        const nodeWithPosition = {\n            ...nodeToUse,\n            position,\n            width: nodeToUse.measured?.width ?? nodeToUse.width,\n            height: nodeToUse.measured?.height ?? nodeToUse.height\n        };\n        return nodeToRect(nodeWithPosition);\n    };\n    function updateNode(id, nodeUpdate, options = { replace: false }) {\n        store.nodes = untrack(() => store.nodes).map((node) => {\n            if (node.id === id) {\n                const nextNode = typeof nodeUpdate === 'function' ? nodeUpdate(node) : nodeUpdate;\n                return options?.replace && isNode(nextNode) ? nextNode : { ...node, ...nextNode };\n            }\n            return node;\n        });\n    }\n    function updateEdge(id, edgeUpdate, options = { replace: false }) {\n        store.edges = untrack(() => store.edges).map((edge) => {\n            if (edge.id === id) {\n                const nextEdge = typeof edgeUpdate === 'function' ? edgeUpdate(edge) : edgeUpdate;\n                return options.replace && isEdge(nextEdge) ? nextEdge : { ...edge, ...nextEdge };\n            }\n            return edge;\n        });\n    }\n    const getInternalNode = (id) => store.nodeLookup.get(id);\n    return {\n        zoomIn: store.zoomIn,\n        zoomOut: store.zoomOut,\n        getInternalNode,\n        getNode: (id) => getInternalNode(id)?.internals.userNode,\n        getNodes: (ids) => (ids === undefined ? store.nodes : getElements(store.nodeLookup, ids)),\n        getEdge: (id) => store.edgeLookup.get(id),\n        getEdges: (ids) => (ids === undefined ? store.edges : getElements(store.edgeLookup, ids)),\n        setZoom: (zoomLevel, options) => {\n            const panZoom = store.panZoom;\n            return panZoom\n                ? panZoom.scaleTo(zoomLevel, { duration: options?.duration })\n                : Promise.resolve(false);\n        },\n        getZoom: () => store.viewport.zoom,\n        setViewport: async (nextViewport, options) => {\n            const currentViewport = store.viewport;\n            if (!store.panZoom) {\n                return Promise.resolve(false);\n            }\n            await store.panZoom.setViewport({\n                x: nextViewport.x ?? currentViewport.x,\n                y: nextViewport.y ?? currentViewport.y,\n                zoom: nextViewport.zoom ?? currentViewport.zoom\n            }, options);\n            return Promise.resolve(true);\n        },\n        getViewport: () => $state.snapshot(store.viewport),\n        setCenter: async (x, y, options) => store.setCenter(x, y, options),\n        fitView: (options) => store.fitView(options),\n        fitBounds: async (bounds, options) => {\n            if (!store.panZoom) {\n                return Promise.resolve(false);\n            }\n            const viewport = getViewportForBounds(bounds, store.width, store.height, store.minZoom, store.maxZoom, options?.padding ?? 0.1);\n            await store.panZoom.setViewport(viewport, {\n                duration: options?.duration,\n                ease: options?.ease,\n                interpolate: options?.interpolate\n            });\n            return Promise.resolve(true);\n        },\n        getIntersectingNodes: (nodeOrRect, partially = true, nodesToIntersect) => {\n            const isRect = isRectObject(nodeOrRect);\n            const nodeRect = isRect ? nodeOrRect : getNodeRect(nodeOrRect);\n            if (!nodeRect) {\n                return [];\n            }\n            return (nodesToIntersect || store.nodes).filter((n) => {\n                const internalNode = store.nodeLookup.get(n.id);\n                if (!internalNode || (!isRect && n.id === nodeOrRect.id)) {\n                    return false;\n                }\n                const currNodeRect = nodeToRect(internalNode);\n                const overlappingArea = getOverlappingArea(currNodeRect, nodeRect);\n                const partiallyVisible = partially && overlappingArea > 0;\n                return partiallyVisible || overlappingArea >= nodeRect.width * nodeRect.height;\n            });\n        },\n        isNodeIntersecting: (nodeOrRect, area, partially = true) => {\n            const isRect = isRectObject(nodeOrRect);\n            const nodeRect = isRect ? nodeOrRect : getNodeRect(nodeOrRect);\n            if (!nodeRect) {\n                return false;\n            }\n            const overlappingArea = getOverlappingArea(nodeRect, area);\n            const partiallyVisible = partially && overlappingArea > 0;\n            return partiallyVisible || overlappingArea >= nodeRect.width * nodeRect.height;\n        },\n        deleteElements: async ({ nodes: nodesToRemove = [], edges: edgesToRemove = [] }) => {\n            const { nodes: matchingNodes, edges: matchingEdges } = await getElementsToRemove({\n                nodesToRemove,\n                edgesToRemove,\n                nodes: store.nodes,\n                edges: store.edges,\n                onBeforeDelete: store.onbeforedelete\n            });\n            if (matchingNodes) {\n                store.nodes = untrack(() => store.nodes).filter((node) => !matchingNodes.some(({ id }) => id === node.id));\n            }\n            if (matchingEdges) {\n                store.edges = untrack(() => store.edges).filter((edge) => !matchingEdges.some(({ id }) => id === edge.id));\n            }\n            return {\n                deletedNodes: matchingNodes,\n                deletedEdges: matchingEdges\n            };\n        },\n        screenToFlowPosition: (position, options = { snapToGrid: true }) => {\n            if (!store.domNode) {\n                return position;\n            }\n            const _snapGrid = options.snapToGrid ? store.snapGrid : false;\n            const { x, y, zoom } = store.viewport;\n            const { x: domX, y: domY } = store.domNode.getBoundingClientRect();\n            const correctedPosition = {\n                x: position.x - domX,\n                y: position.y - domY\n            };\n            return pointToRendererPoint(correctedPosition, [x, y, zoom], _snapGrid !== null, _snapGrid || [1, 1]);\n        },\n        /**\n         *\n         * @param position\n         * @returns\n         */\n        flowToScreenPosition: (position) => {\n            if (!store.domNode) {\n                return position;\n            }\n            const { x, y, zoom } = store.viewport;\n            const { x: domX, y: domY } = store.domNode.getBoundingClientRect();\n            const rendererPosition = rendererPointToPoint(position, [x, y, zoom]);\n            return {\n                x: rendererPosition.x + domX,\n                y: rendererPosition.y + domY\n            };\n        },\n        toObject: () => {\n            return structuredClone({\n                nodes: [...store.nodes],\n                edges: [...store.edges],\n                viewport: { ...store.viewport }\n            });\n        },\n        updateNode,\n        updateNodeData: (id, dataUpdate, options) => {\n            const node = store.nodeLookup.get(id)?.internals.userNode;\n            if (!node) {\n                return;\n            }\n            const nextData = typeof dataUpdate === 'function' ? dataUpdate(node) : dataUpdate;\n            updateNode(id, (node) => ({\n                ...node,\n                data: options?.replace ? nextData : { ...node.data, ...nextData }\n            }));\n        },\n        updateEdge,\n        getNodesBounds: (nodes) => {\n            return getNodesBounds(nodes, { nodeLookup: store.nodeLookup, nodeOrigin: store.nodeOrigin });\n        },\n        getHandleConnections: ({ type, id, nodeId }) => Array.from(store.connectionLookup.get(`${nodeId}-${type}-${id ?? null}`)?.values() ?? [])\n    };\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getElements(lookup, ids) {\n    const result = [];\n    for (const id of ids) {\n        const item = lookup.get(id);\n        if (item) {\n            const element = 'internals' in item ? item.internals?.userNode : item;\n            result.push(element);\n        }\n    }\n    return result;\n}\n", "<script lang=\"ts\" generics=\"NodeType extends Node = Node, EdgeType extends Edge = Edge\">\n  import {\n    shortcut,\n    type ShortcutEventDetail,\n    type ShortcutModifierDefinition\n  } from '@svelte-put/shortcut';\n  import { isInputDOMNode, isMacOs } from '@xyflow/system';\n\n  import type { KeyHandlerProps } from './types';\n  import type { Node, Edge, KeyDefinition, KeyDefinitionObject } from '../../types';\n  import { useSvelteFlow } from '../../hooks/useSvelteFlow.svelte';\n\n  let {\n    store = $bindable(),\n    selectionKey = 'Shift',\n    multiSelectionKey = isMacOs() ? 'Meta' : 'Control',\n    deleteKey = 'Backspace',\n    panActivationKey = ' ',\n    zoomActivationKey = isMacOs() ? 'Meta' : 'Control'\n  }: KeyHandlerProps<NodeType, EdgeType> = $props();\n\n  let { deleteElements } = useSvelteFlow<NodeType, EdgeType>();\n\n  function isKeyObject(key?: KeyDefinition | null): key is KeyDefinitionObject {\n    return key !== null && typeof key === 'object';\n  }\n\n  function getModifier(key?: KeyDefinition | null): ShortcutModifierDefinition {\n    return isKeyObject(key) ? key.modifier || [] : [];\n  }\n\n  function getKeyString(key?: KeyDefinition | null): string {\n    if (key === null || key === undefined) {\n      // this is a workaround to check if a key is set\n      // if not we won't call the callback\n      return '';\n    }\n\n    return isKeyObject(key) ? key.key : key;\n  }\n\n  function getShortcutTrigger(\n    key: KeyDefinition | KeyDefinition[] | null | undefined,\n    callback: (detail: ShortcutEventDetail) => void\n  ) {\n    const keys = Array.isArray(key) ? key : [key];\n    return keys.map((_key) => {\n      const keyString = getKeyString(_key);\n      return {\n        key: keyString,\n        modifier: getModifier(_key),\n        enabled: keyString !== null,\n        callback\n      };\n    });\n  }\n\n  function resetKeysAndSelection() {\n    store.selectionRect = null;\n    store.selectionKeyPressed = false;\n    store.multiselectionKeyPressed = false;\n    store.deleteKeyPressed = false;\n    store.panActivationKeyPressed = false;\n    store.zoomActivationKeyPressed = false;\n  }\n\n  async function handleDelete() {\n    const selectedNodes = store.nodes.filter((node) => node.selected);\n    const selectedEdges = store.edges.filter((edge) => edge.selected);\n\n    const { deletedNodes, deletedEdges } = await deleteElements({\n      nodes: selectedNodes,\n      edges: selectedEdges\n    });\n\n    if (deletedNodes.length > 0 || deletedEdges.length > 0) {\n      store.ondelete?.({\n        nodes: deletedNodes,\n        edges: deletedEdges\n      });\n    }\n  }\n</script>\n\n<svelte:window\n  on:blur={resetKeysAndSelection}\n  on:contextmenu={resetKeysAndSelection}\n  use:shortcut={{\n    trigger: getShortcutTrigger(selectionKey, () => (store.selectionKeyPressed = true)),\n    type: 'keydown'\n  }}\n  use:shortcut={{\n    trigger: getShortcutTrigger(selectionKey, () => (store.selectionKeyPressed = false)),\n    type: 'keyup'\n  }}\n  use:shortcut={{\n    trigger: getShortcutTrigger(multiSelectionKey, () => {\n      store.multiselectionKeyPressed = true;\n    }),\n    type: 'keydown'\n  }}\n  use:shortcut={{\n    trigger: getShortcutTrigger(multiSelectionKey, () => (store.multiselectionKeyPressed = false)),\n    type: 'keyup'\n  }}\n  use:shortcut={{\n    trigger: getShortcutTrigger(deleteKey, (detail) => {\n      const isModifierKey =\n        detail.originalEvent.ctrlKey ||\n        detail.originalEvent.metaKey ||\n        detail.originalEvent.shiftKey;\n      if (!isModifierKey && !isInputDOMNode(detail.originalEvent)) {\n        store.deleteKeyPressed = true;\n        handleDelete();\n      }\n    }),\n    type: 'keydown'\n  }}\n  use:shortcut={{\n    trigger: getShortcutTrigger(deleteKey, () => (store.deleteKeyPressed = false)),\n    type: 'keyup'\n  }}\n  use:shortcut={{\n    trigger: getShortcutTrigger(panActivationKey, () => (store.panActivationKeyPressed = true)),\n    type: 'keydown'\n  }}\n  use:shortcut={{\n    trigger: getShortcutTrigger(panActivationKey, () => (store.panActivationKeyPressed = false)),\n    type: 'keyup'\n  }}\n  use:shortcut={{\n    trigger: getShortcutTrigger(zoomActivationKey, () => (store.zoomActivationKeyPressed = true)),\n    type: 'keydown'\n  }}\n  use:shortcut={{\n    trigger: getShortcutTrigger(zoomActivationKey, () => (store.zoomActivationKeyPressed = false)),\n    type: 'keyup'\n  }}\n/>\n", "<script lang=\"ts\" generics=\"NodeType extends Node = Node, EdgeType extends Edge = Edge\">\n  import type { Component } from 'svelte';\n  import {\n    ConnectionLineType,\n    getBezierPath,\n    getConnectionStatus,\n    getSmoothStepPath,\n    getStraightPath\n  } from '@xyflow/system';\n\n  import type { SvelteFlowStore } from '../../store/types';\n  import type { Node, Edge } from '../../types';\n\n  let {\n    store = $bindable(),\n    type,\n    containerStyle,\n    style,\n    LineComponent\n  }: {\n    store: SvelteFlowStore<NodeType, EdgeType>;\n    type: ConnectionLineType;\n    containerStyle?: string;\n    style?: string;\n    LineComponent?: Component;\n  } = $props();\n\n  let path = $derived.by(() => {\n    if (!store.connection.inProgress) {\n      return '';\n    }\n\n    const pathParams = {\n      sourceX: store.connection.from.x,\n      sourceY: store.connection.from.y,\n      sourcePosition: store.connection.fromPosition,\n      targetX: store.connection.to.x,\n      targetY: store.connection.to.y,\n      targetPosition: store.connection.toPosition\n    };\n\n    switch (type) {\n      case ConnectionLineType.Bezier: {\n        const [path] = getBezierPath(pathParams);\n        return path;\n      }\n      case ConnectionLineType.Straight: {\n        const [path] = getStraightPath(pathParams);\n        return path;\n      }\n      case ConnectionLineType.Step:\n      case ConnectionLineType.SmoothStep: {\n        const [path] = getSmoothStepPath({\n          ...pathParams,\n          borderRadius: type === ConnectionLineType.Step ? 0 : undefined\n        });\n        return path;\n      }\n    }\n  });\n</script>\n\n{#if store.connection.inProgress}\n  <svg\n    width={store.width}\n    height={store.height}\n    class=\"svelte-flow__connectionline\"\n    style={containerStyle}\n  >\n    <g class={['svelte-flow__connection', getConnectionStatus(store.connection.isValid)]}>\n      {#if LineComponent}\n        <LineComponent></LineComponent>\n      {:else}\n        <path d={path} {style} fill=\"none\" class=\"svelte-flow__connection-path\" />\n      {/if}\n    </g>\n  </svg>\n{/if}\n", "<script lang=\"ts\">\n  import type { PanelProps } from './types';\n  import { useStore } from '../../store';\n\n  let { position = 'top-right', style, class: className, children, ...rest }: PanelProps = $props();\n\n  let store = $derived(useStore());\n\n  let positionClasses = $derived(`${position}`.split('-'));\n</script>\n\n<div\n  class={['svelte-flow__panel', className, ...positionClasses]}\n  {style}\n  style:pointer-events={store.selectionRectMode ? 'none' : ''}\n  {...rest}\n>\n  {@render children?.()}\n</div>\n", "<script lang=\"ts\">\n  import { Panel } from '../../container/Panel';\n  import type { AttributionProps } from './types';\n\n  let { proOptions, position = 'bottom-right' }: AttributionProps = $props();\n</script>\n\n{#if !proOptions?.hideAttribution}\n  <Panel\n    {position}\n    class=\"svelte-flow__attribution\"\n    data-message=\"Feel free to remove the attribution or check out how you could support us: https://svelteflow.dev/support-us\"\n  >\n    <a\n      href=\"https://svelteflow.dev\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      aria-label=\"Svelte Flow attribution\"\n    >\n      Svelte Flow\n    </a>\n  </Panel>\n{/if}\n", "<script lang=\"ts\" generics=\"NodeType extends Node = Node, EdgeType extends Edge = Edge\">\n  import type { HTMLAttributes } from 'svelte/elements';\n  import type { Snippet } from 'svelte';\n  import { type SvelteFlowRestProps } from '../../store/types';\n  import { toPxString } from '../../utils';\n  import type { Node, Edge } from '../../types';\n\n  let {\n    width,\n    height,\n    colorMode,\n    domNode = $bindable(),\n    clientWidth = $bindable(),\n    clientHeight = $bindable(),\n    children,\n    rest\n  }: {\n    width?: number;\n    height?: number;\n    colorMode?: string;\n    domNode: HTMLDivElement | null;\n    clientWidth?: number;\n    clientHeight?: number;\n    children?: Snippet;\n    rest: SvelteFlowRestProps<NodeType, EdgeType> &\n      Omit<HTMLAttributes<HTMLDivElement>, 'onselectionchange'>;\n  } = $props();\n\n  // Unfortunately we have to destructure the props here this way,\n  // so we don't pass all the props as attributes to the div element\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  let {\n    id,\n    class: className,\n    nodeTypes,\n    edgeTypes,\n    colorMode: _colorMode,\n    isValidConnection,\n    onmove,\n    onmovestart,\n    onmoveend,\n    onflowerror,\n    ondelete,\n    onbeforedelete,\n    onbeforeconnect,\n    onconnect,\n    onconnectstart,\n    onconnectend,\n    onbeforereconnect,\n    onreconnect,\n    onreconnectstart,\n    onreconnectend,\n    onclickconnectstart,\n    onclickconnectend,\n    oninit,\n    onselectionchange,\n    onselectiondragstart,\n    onselectiondrag,\n    onselectiondragstop,\n    onselectionstart,\n    onselectionend,\n    clickConnect,\n    fitView,\n    fitViewOptions,\n    nodeOrigin,\n    nodeDragThreshold,\n    minZoom,\n    maxZoom,\n    initialViewport,\n    connectionRadius,\n    connectionMode,\n    selectionMode,\n    selectNodesOnDrag,\n    snapGrid,\n    defaultMarkerColor,\n    translateExtent,\n    nodeExtent,\n    onlyRenderVisibleElements,\n    autoPanOnConnect,\n    autoPanOnNodeDrag,\n    colorModeSSR,\n    style,\n    defaultEdgeOptions,\n    elevateNodesOnSelect,\n    elevateEdgesOnSelect,\n    nodesDraggable,\n    autoPanOnNodeFocus,\n    nodesConnectable,\n    elementsSelectable,\n    nodesFocusable,\n    edgesFocusable,\n    disableKeyboardA11y,\n    noDragClass,\n    noPanClass,\n    noWheelClass,\n    ariaLabelConfig,\n    ...divAttributes\n  } = $derived(rest);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  type OnlyDivAttributes<T> = {\n    [K in keyof T]: K extends keyof HTMLAttributes<HTMLDivElement> ? T[K] : never;\n  };\n\n  // Undo scroll events, preventing viewport from shifting when nodes outside of it are focused\n  function wrapperOnScroll(e: UIEvent & { currentTarget: EventTarget & HTMLDivElement }) {\n    e.currentTarget.scrollTo({ top: 0, left: 0, behavior: 'auto' });\n\n    // Forward the event to any existing onscroll handler if needed\n    if (rest.onscroll) {\n      rest.onscroll(e);\n    }\n  }\n</script>\n\n<div\n  bind:this={domNode}\n  bind:clientHeight\n  bind:clientWidth\n  style:width={toPxString(width)}\n  style:height={toPxString(height)}\n  class={['svelte-flow', 'svelte-flow__container', className, colorMode]}\n  data-testid=\"svelte-flow__wrapper\"\n  role=\"application\"\n  onscroll={wrapperOnScroll}\n  {...divAttributes satisfies OnlyDivAttributes<typeof divAttributes>}\n>\n  {@render children?.()}\n</div>\n\n<style>\n  .svelte-flow {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    position: relative;\n    z-index: 0;\n\n    background-color: var(--background-color, var(--background-color-default));\n  }\n\n  :root {\n    --background-color-default: #fff;\n    --background-pattern-color-default: #ddd;\n\n    --minimap-mask-color-default: rgb(240, 240, 240, 0.6);\n    --minimap-mask-stroke-color-default: none;\n    --minimap-mask-stroke-width-default: 1;\n\n    --controls-button-background-color-default: #fefefe;\n    --controls-button-background-color-hover-default: #f4f4f4;\n    --controls-button-color-default: inherit;\n    --controls-button-color-hover-default: inherit;\n    --controls-button-border-color-default: #eee;\n  }\n</style>\n", "<script lang=\"ts\" generics=\"NodeType extends Node = Node, EdgeType extends Edge = Edge\">\n  import type { Edge, Node } from '../../types';\n  import { getContext, setContext, onDestroy, untrack } from 'svelte';\n  import type { HTMLAttributes } from 'svelte/elements';\n  import { ConnectionLineType, PanOnScrollMode } from '@xyflow/system';\n\n  import { key, createStore } from '../../store';\n  import { Zoom } from '../Zoom';\n  import { Pane } from '../Pane';\n  import { Viewport as ViewportComponent } from '../Viewport';\n  import { NodeRenderer } from '../NodeRenderer';\n  import { EdgeRenderer } from '../EdgeRenderer';\n  import { NodeSelection } from '../../components/NodeSelection';\n  import { Selection } from '../../components/Selection';\n  import { KeyHandler } from '../../components/KeyHandler';\n  import { ConnectionLine } from '../../components/ConnectionLine';\n  import { Attribution } from '../../components/Attribution';\n  import type { SvelteFlowProps } from './types';\n  import { type ProviderContext, type StoreContext } from '../../store/types';\n  import Wrapper from './Wrapper.svelte';\n  import { A11yDescriptions } from '../../components/A11yDescriptions';\n\n  let {\n    width,\n    height,\n    proOptions,\n    selectionKey,\n    deleteKey,\n    panActivationKey,\n    multiSelectionKey,\n    zoomActivationKey,\n    paneClickDistance = 1,\n    nodeClickDistance = 1,\n    onmovestart,\n    onmoveend,\n    onmove,\n    oninit,\n    onnodeclick,\n    onnodecontextmenu,\n    onnodedrag,\n    onnodedragstart,\n    onnodedragstop,\n    onnodepointerenter,\n    onnodepointermove,\n    onnodepointerleave,\n    onselectionclick,\n    onselectioncontextmenu,\n    onselectionstart,\n    onselectionend,\n    onedgeclick,\n    onedgecontextmenu,\n    onedgepointerenter,\n    onedgepointerleave,\n    onpaneclick,\n    onpanecontextmenu,\n    panOnScrollMode = PanOnScrollMode.Free,\n    preventScrolling = true,\n    zoomOnScroll = true,\n    zoomOnDoubleClick = true,\n    zoomOnPinch = true,\n    panOnScroll = false,\n    panOnDrag = true,\n    selectionOnDrag = true,\n    connectionLineComponent,\n    connectionLineStyle,\n    connectionLineContainerStyle,\n    connectionLineType = ConnectionLineType.Bezier,\n    attributionPosition,\n    children,\n    nodes = $bindable([]),\n    edges = $bindable([]),\n    viewport = $bindable(undefined),\n    ...props\n  }: SvelteFlowProps<NodeType, EdgeType> &\n    Omit<HTMLAttributes<HTMLDivElement>, 'onselectionchange'> = $props();\n\n  // svelte-ignore non_reactive_update\n  let store = createStore<NodeType, EdgeType>({\n    props,\n    width,\n    height,\n    get nodes() {\n      return nodes;\n    },\n    set nodes(newNodes) {\n      nodes = newNodes;\n    },\n    get edges() {\n      return edges;\n    },\n    set edges(newEdges) {\n      edges = newEdges;\n    },\n    get viewport() {\n      return viewport;\n    },\n    set viewport(newViewport) {\n      viewport = newViewport;\n    }\n  });\n\n  // Set store for provider context\n  const providerContext = getContext<ProviderContext<NodeType, EdgeType>>(key);\n  if (providerContext && providerContext.setStore) {\n    providerContext.setStore(store);\n  }\n\n  // Overwrite store context to give children direct access\n  setContext(key, {\n    provider: false,\n    getStore() {\n      return store;\n    }\n  } satisfies StoreContext<NodeType, EdgeType>);\n\n  // handle selection change\n  $effect(() => {\n    const params = { nodes: store.selectedNodes, edges: store.selectedEdges };\n    untrack(() => props.onselectionchange)?.(params);\n    for (const handler of store.selectionChangeHandlers.values()) {\n      handler(params);\n    }\n  });\n\n  onDestroy(() => {\n    store.reset();\n  });\n</script>\n\n<Wrapper\n  bind:domNode={store.domNode}\n  bind:clientWidth={store.width}\n  bind:clientHeight={store.height}\n  colorMode={store.colorMode}\n  {width}\n  {height}\n  rest={props}\n>\n  <KeyHandler\n    bind:store\n    {selectionKey}\n    {deleteKey}\n    {panActivationKey}\n    {multiSelectionKey}\n    {zoomActivationKey}\n  />\n  <Zoom\n    bind:store\n    {panOnScrollMode}\n    {preventScrolling}\n    {zoomOnScroll}\n    {zoomOnDoubleClick}\n    {zoomOnPinch}\n    {panOnScroll}\n    {panOnDrag}\n    {paneClickDistance}\n    {onmovestart}\n    {onmove}\n    {onmoveend}\n    {oninit}\n  >\n    <Pane\n      bind:store\n      {onpaneclick}\n      {onpanecontextmenu}\n      {onselectionstart}\n      {onselectionend}\n      {panOnDrag}\n      {selectionOnDrag}\n    >\n      <ViewportComponent bind:store>\n        <div class=\"svelte-flow__viewport-back svelte-flow__container\"></div>\n        <EdgeRenderer\n          bind:store\n          {onedgeclick}\n          {onedgecontextmenu}\n          {onedgepointerenter}\n          {onedgepointerleave}\n        />\n        <div class=\"svelte-flow__edge-labels svelte-flow__container\"></div>\n        <ConnectionLine\n          bind:store\n          type={connectionLineType}\n          LineComponent={connectionLineComponent}\n          containerStyle={connectionLineContainerStyle}\n          style={connectionLineStyle}\n        />\n        <NodeRenderer\n          bind:store\n          {nodeClickDistance}\n          {onnodeclick}\n          {onnodecontextmenu}\n          {onnodepointerenter}\n          {onnodepointermove}\n          {onnodepointerleave}\n          {onnodedrag}\n          {onnodedragstart}\n          {onnodedragstop}\n        />\n        <NodeSelection\n          bind:store\n          {onselectionclick}\n          {onselectioncontextmenu}\n          {onnodedrag}\n          {onnodedragstart}\n          {onnodedragstop}\n        />\n        <div class=\"svelte-flow__viewport-front svelte-flow__container\"></div>\n      </ViewportComponent>\n      <Selection\n        isVisible={!!(store.selectionRect && store.selectionRectMode === 'user')}\n        width={store.selectionRect?.width}\n        height={store.selectionRect?.height}\n        x={store.selectionRect?.x}\n        y={store.selectionRect?.y}\n      />\n    </Pane>\n  </Zoom>\n  <Attribution {proOptions} position={attributionPosition} />\n  <A11yDescriptions {store} />\n  {@render children?.()}\n</Wrapper>\n", "<script lang=\"ts\" generics=\"NodeType extends Node = Node, EdgeType extends Edge = Edge\">\n  import { onDestroy, setContext } from 'svelte';\n\n  import { createStore, key } from '../../store';\n  import type { SvelteFlowProviderProps } from './types';\n  import type { ProviderContext, SvelteFlowStore } from '../../store/types';\n  import type { Node, Edge } from '../../types';\n\n  let { children }: SvelteFlowProviderProps = $props();\n\n  let store = $state.raw(\n    createStore<NodeType, EdgeType>({\n      props: {},\n      nodes: [],\n      edges: []\n    })\n  );\n\n  setContext(key, {\n    provider: true,\n    getStore() {\n      return store;\n    },\n    setStore: (newStore: SvelteFlowStore<NodeType, EdgeType>) => {\n      store = newStore;\n    }\n  } satisfies ProviderContext<NodeType, EdgeType>);\n\n  onDestroy(() => {\n    store.reset();\n  });\n</script>\n\n{@render children?.()}\n", "<script lang=\"ts\">\n  import { hideOnSSR, portal } from '../../actions/portal';\n  import type { ViewportPortalProps } from './types';\n\n  let { target = 'front', children, ...rest }: ViewportPortalProps = $props();\n</script>\n\n<div\n  use:portal={`viewport-${target}`}\n  style:display={hideOnSSR().value ? 'none' : undefined}\n  {...rest}\n>\n  {@render children?.()}\n</div>\n", "<script lang=\"ts\">\n  import { useStore } from '../../store';\n  import type { Edge } from '../../types';\n  import { XYHandle, type HandleType } from '@xyflow/system';\n  import { getContext } from 'svelte';\n  import { EdgeLabel } from '../EdgeLabel';\n  import type { EdgeReconnectAnchorProps } from './types';\n\n  let {\n    type,\n    reconnecting = $bindable(false),\n    position,\n    class: className,\n    size = 25,\n    children,\n    ...rest\n  }: EdgeReconnectAnchorProps = $props();\n\n  const store = useStore();\n\n  let edgeId: string | undefined = getContext('svelteflow__edge_id');\n\n  if (!edgeId) {\n    throw new Error('EdgeReconnectAnchor must be used within an Edge component');\n  }\n\n  const onPointerDown = (event: PointerEvent) => {\n    if (event.button !== 0) {\n      return;\n    }\n\n    const {\n      autoPanOnConnect,\n      domNode,\n      isValidConnection,\n      connectionMode,\n      connectionRadius,\n      onconnectstart,\n      onconnectend,\n      onreconnect,\n      onreconnectstart,\n      onreconnectend,\n      onbeforereconnect,\n      cancelConnection,\n      nodeLookup,\n      flowId,\n      panBy,\n      updateConnection,\n      edgeLookup\n    } = store;\n\n    let newEdge: Edge | undefined;\n    let edge = edgeLookup.get(edgeId)!;\n\n    reconnecting = true;\n    onreconnectstart?.(event, edge, type);\n\n    const opposite =\n      type === 'target'\n        ? { nodeId: edge.source, handleId: edge.sourceHandle ?? null, type: 'source' as HandleType }\n        : {\n            nodeId: edge.target,\n            handleId: edge.targetHandle ?? null,\n            type: 'target' as HandleType\n          };\n\n    XYHandle.onPointerDown(event, {\n      autoPanOnConnect,\n      connectionMode,\n      connectionRadius,\n      domNode,\n      handleId: opposite.handleId,\n      nodeId: opposite.nodeId,\n      nodeLookup,\n      isTarget: opposite.type === 'target',\n      edgeUpdaterType: opposite.type,\n      lib: 'svelte',\n      flowId,\n      cancelConnection,\n      panBy,\n      isValidConnection,\n      onConnectStart: onconnectstart,\n      onConnectEnd: onconnectend,\n      onConnect: (connection) => {\n        newEdge = { ...edge, ...connection };\n        newEdge = onbeforereconnect ? (onbeforereconnect(newEdge, edge) ?? undefined) : newEdge;\n\n        if (newEdge) {\n          store.edges = store.edges.map((e) => (e.id === edge.id ? (newEdge as Edge) : e));\n        }\n\n        onreconnect?.(edge, connection);\n      },\n      onReconnectEnd: (event, connectionState) => {\n        reconnecting = false;\n        onreconnectend?.(event, edge, opposite.type, connectionState);\n      },\n      updateConnection,\n      getTransform: () => [store.viewport.x, store.viewport.y, store.viewport.zoom],\n      getFromHandle: () => store.connection.fromHandle\n    });\n  };\n</script>\n\n<EdgeLabel\n  x={position?.x}\n  y={position?.y}\n  width={size}\n  height={size}\n  class={[\n    'svelte-flow__edgeupdater',\n    `svelte-flow__edgeupdater-${type}`,\n    store.noPanClass,\n    className\n  ]}\n  onpointerdown={onPointerDown}\n  transparent\n  {...rest}\n>\n  {#if !reconnecting && children}\n    {@render children()}\n  {/if}\n</EdgeLabel>\n", "<script lang=\"ts\">\n  import type { ControlButtonProps } from './types';\n\n  let {\n    class: className,\n    bgColor,\n    bgColorHover,\n    color,\n    colorHover,\n    borderColor,\n    onclick,\n    children,\n    ...restProps\n  }: ControlButtonProps = $props();\n</script>\n\n<button\n  type=\"button\"\n  {onclick}\n  class={['svelte-flow__controls-button', className]}\n  style:--xy-controls-button-background-color-props={bgColor}\n  style:--xy-controls-button-background-color-hover-props={bgColorHover}\n  style:--xy-controls-button-color-props={color}\n  style:--xy-controls-button-color-hover-props={colorHover}\n  style:--xy-controls-button-border-color-props={borderColor}\n  {...restProps}\n>\n  {@render children?.()}\n</button>\n", "import 'svelte/internal/disclose-version';\nimport 'svelte/internal/flags/legacy';\n\nPlus[$.FILENAME] = 'node_modules/@xyflow/svelte/dist/lib/plugins/Controls/Icons/Plus.svelte';\n\nimport * as $ from 'svelte/internal/client';\n\nvar root = $.add_locations($.from_svg(`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M32 18.133H18.133V32h-4.266V18.133H0v-4.266h13.867V0h4.266v13.867H32z\"></path></svg>`), Plus[$.FILENAME], [[1, 0, [[2, 2]]]]);\n\nfunction Plus($$anchor, $$props) {\n\t$.check_target(new.target);\n\t$.push($$props, false, Plus);\n\n\tvar svg = root();\n\n\t$.append($$anchor, svg);\n\treturn $.pop({ ...$.legacy_api() });\n}\n\nif (import.meta.hot) {\n\tPlus = $.hmr(Plus, () => Plus[$.HMR].source);\n\n\timport.meta.hot.accept((module) => {\n\t\tmodule.default[$.HMR].source = Plus[$.HMR].source;\n\t\t$.set(Plus[$.HMR].source, module.default[$.HMR].original);\n\t});\n}\n\nexport default Plus;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6IiIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiUGx1cy5zdmVsdGUiXX0=", "import 'svelte/internal/disclose-version';\nimport 'svelte/internal/flags/legacy';\n\nMinus[$.FILENAME] = 'node_modules/@xyflow/svelte/dist/lib/plugins/Controls/Icons/Minus.svelte';\n\nimport * as $ from 'svelte/internal/client';\n\nvar root = $.add_locations($.from_svg(`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 5\"><path d=\"M0 0h32v4.2H0z\"></path></svg>`), Minus[$.FILENAME], [[1, 0, [[2, 2]]]]);\n\nfunction Minus($$anchor, $$props) {\n\t$.check_target(new.target);\n\t$.push($$props, false, Minus);\n\n\tvar svg = root();\n\n\t$.append($$anchor, svg);\n\treturn $.pop({ ...$.legacy_api() });\n}\n\nif (import.meta.hot) {\n\tMinus = $.hmr(Minus, () => Minus[$.HMR].source);\n\n\timport.meta.hot.accept((module) => {\n\t\tmodule.default[$.HMR].source = Minus[$.HMR].source;\n\t\t$.set(Minus[$.HMR].source, module.default[$.HMR].original);\n\t});\n}\n\nexport default Minus;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6IiIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiTWludXMuc3ZlbHRlIl19", "import 'svelte/internal/disclose-version';\nimport 'svelte/internal/flags/legacy';\n\nFit[$.FILENAME] = 'node_modules/@xyflow/svelte/dist/lib/plugins/Controls/Icons/Fit.svelte';\n\nimport * as $ from 'svelte/internal/client';\n\nvar root = $.add_locations($.from_svg(`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 30\"><path d=\"M3.692 4.63c0-.53.4-.938.939-.938h5.215V0H4.708C2.13 0 0 2.054 0 4.63v5.216h3.692V4.631zM27.354 0h-5.2v3.692h5.17c.53 0 .984.4.984.939v5.215H32V4.631A4.624 4.624 0 0027.354 0zm.954 24.83c0 .532-.4.94-.939.94h-5.215v3.768h5.215c2.577 0 4.631-2.13 4.631-4.707v-5.139h-3.692v5.139zm-23.677.94c-.531 0-.939-.4-.939-.94v-5.138H0v5.139c0 2.577 2.13 4.707 4.708 4.707h5.138V25.77H4.631z\"></path></svg>`), Fit[$.FILENAME], [[1, 0, [[2, 2]]]]);\n\nfunction Fit($$anchor, $$props) {\n\t$.check_target(new.target);\n\t$.push($$props, false, Fit);\n\n\tvar svg = root();\n\n\t$.append($$anchor, svg);\n\treturn $.pop({ ...$.legacy_api() });\n}\n\nif (import.meta.hot) {\n\tFit = $.hmr(Fit, () => Fit[$.HMR].source);\n\n\timport.meta.hot.accept((module) => {\n\t\tmodule.default[$.HMR].source = Fit[$.HMR].source;\n\t\t$.set(Fit[$.HMR].source, module.default[$.HMR].original);\n\t});\n}\n\nexport default Fit;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6IiIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiRml0LnN2ZWx0ZSJdfQ==", "import 'svelte/internal/disclose-version';\nimport 'svelte/internal/flags/legacy';\n\nLock[$.FILENAME] = 'node_modules/@xyflow/svelte/dist/lib/plugins/Controls/Icons/Lock.svelte';\n\nimport * as $ from 'svelte/internal/client';\n\nvar root = $.add_locations($.from_svg(`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 25 32\"><path d=\"M21.333 10.667H19.81V7.619C19.81 3.429 16.38 0 12.19 0 8 0 4.571 3.429 4.571 7.619v3.048H3.048A3.056 3.056 0 000 13.714v15.238A3.056 3.056 0 003.048 32h18.285a3.056 3.056 0 003.048-3.048V13.714a3.056 3.056 0 00-3.048-3.047zM12.19 24.533a3.056 3.056 0 01-3.047-3.047 3.056 3.056 0 013.047-3.048 3.056 3.056 0 013.048 3.048 3.056 3.056 0 01-3.048 3.047zm4.724-13.866H7.467V7.619c0-2.59 2.133-4.724 4.723-4.724 2.591 0 4.724 2.133 4.724 4.724v3.048z\"></path></svg>`), Lock[$.FILENAME], [[1, 0, [[2, 2]]]]);\n\nfunction Lock($$anchor, $$props) {\n\t$.check_target(new.target);\n\t$.push($$props, false, Lock);\n\n\tvar svg = root();\n\n\t$.append($$anchor, svg);\n\treturn $.pop({ ...$.legacy_api() });\n}\n\nif (import.meta.hot) {\n\tLock = $.hmr(Lock, () => Lock[$.HMR].source);\n\n\timport.meta.hot.accept((module) => {\n\t\tmodule.default[$.HMR].source = Lock[$.HMR].source;\n\t\t$.set(Lock[$.HMR].source, module.default[$.HMR].original);\n\t});\n}\n\nexport default Lock;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6IiIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiTG9jay5zdmVsdGUiXX0=", "import 'svelte/internal/disclose-version';\nimport 'svelte/internal/flags/legacy';\n\nUnlock[$.FILENAME] = 'node_modules/@xyflow/svelte/dist/lib/plugins/Controls/Icons/Unlock.svelte';\n\nimport * as $ from 'svelte/internal/client';\n\nvar root = $.add_locations($.from_svg(`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 25 32\"><path d=\"M21.333 10.667H19.81V7.619C19.81 3.429 16.38 0 12.19 0c-4.114 1.828-1.37 2.133.305 2.438 1.676.305 4.42 2.59 4.42 5.181v3.048H3.047A3.056 3.056 0 000 13.714v15.238A3.056 3.056 0 003.048 32h18.285a3.056 3.056 0 003.048-3.048V13.714a3.056 3.056 0 00-3.048-3.047zM12.19 24.533a3.056 3.056 0 01-3.047-3.047 3.056 3.056 0 013.047-3.048 3.056 3.056 0 013.048 3.048 3.056 3.056 0 01-3.048 3.047z\"></path></svg>`), Unlock[$.FILENAME], [[1, 0, [[2, 2]]]]);\n\nfunction Unlock($$anchor, $$props) {\n\t$.check_target(new.target);\n\t$.push($$props, false, Unlock);\n\n\tvar svg = root();\n\n\t$.append($$anchor, svg);\n\treturn $.pop({ ...$.legacy_api() });\n}\n\nif (import.meta.hot) {\n\tUnlock = $.hmr(Unlock, () => Unlock[$.HMR].source);\n\n\timport.meta.hot.accept((module) => {\n\t\tmodule.default[$.HMR].source = Unlock[$.HMR].source;\n\t\t$.set(Unlock[$.HMR].source, module.default[$.HMR].original);\n\t});\n}\n\nexport default Unlock;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6IiIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiVW5sb2NrLnN2ZWx0ZSJdfQ==", "<script lang=\"ts\">\n  import { useStore } from '../../store';\n  import Panel from '../../container/Panel/Panel.svelte';\n  import ControlButton from './ControlButton.svelte';\n  import PlusIcon from './Icons/Plus.svelte';\n  import MinusIcon from './Icons/Minus.svelte';\n  import FitViewIcon from './Icons/Fit.svelte';\n  import LockIcon from './Icons/Lock.svelte';\n  import UnlockIcon from './Icons/Unlock.svelte';\n\n  import type { ControlsProps } from './types';\n\n  let {\n    position = 'bottom-left',\n    orientation = 'vertical',\n    showZoom = true,\n    showFitView = true,\n    showLock = true,\n    style,\n    class: className,\n    buttonBgColor,\n    buttonBgColorHover,\n    buttonColor,\n    buttonColorHover,\n    buttonBorderColor,\n    fitViewOptions,\n    children,\n    before,\n    after,\n    ...rest\n  }: ControlsProps = $props();\n\n  let store = $derived(useStore());\n\n  const buttonProps = {\n    bgColor: buttonBgColor,\n    bgColorHover: buttonBgColorHover,\n    color: buttonColor,\n    colorHover: buttonColorHover,\n    borderColor: buttonBorderColor\n  };\n\n  let isInteractive = $derived(\n    store.nodesDraggable || store.nodesConnectable || store.elementsSelectable\n  );\n  let minZoomReached = $derived(store.viewport.zoom <= store.minZoom);\n  let maxZoomReached = $derived(store.viewport.zoom >= store.maxZoom);\n  let ariaLabelConfig = $derived(store.ariaLabelConfig);\n  let orientationClass = $derived(orientation === 'horizontal' ? 'horizontal' : 'vertical');\n\n  const onZoomInHandler = () => {\n    store.zoomIn();\n  };\n\n  const onZoomOutHandler = () => {\n    store.zoomOut();\n  };\n\n  const onFitViewHandler = () => {\n    store.fitView(fitViewOptions);\n  };\n\n  const onToggleInteractivity = () => {\n    let interactive = !isInteractive;\n    store.nodesDraggable = interactive;\n    store.nodesConnectable = interactive;\n    store.elementsSelectable = interactive;\n  };\n</script>\n\n<Panel\n  class={['svelte-flow__controls', orientationClass, className]}\n  {position}\n  data-testid=\"svelte-flow__controls\"\n  aria-label={ariaLabelConfig['controls.ariaLabel']}\n  {style}\n  {...rest}\n>\n  {#if before}\n    {@render before()}\n  {/if}\n  {#if showZoom}\n    <ControlButton\n      onclick={onZoomInHandler}\n      class=\"svelte-flow__controls-zoomin\"\n      title={ariaLabelConfig['controls.zoomIn.ariaLabel']}\n      aria-label={ariaLabelConfig['controls.zoomIn.ariaLabel']}\n      disabled={maxZoomReached}\n      {...buttonProps}\n    >\n      <PlusIcon />\n    </ControlButton>\n    <ControlButton\n      onclick={onZoomOutHandler}\n      class=\"svelte-flow__controls-zoomout\"\n      title={ariaLabelConfig['controls.zoomOut.ariaLabel']}\n      aria-label={ariaLabelConfig['controls.zoomOut.ariaLabel']}\n      disabled={minZoomReached}\n      {...buttonProps}\n    >\n      <MinusIcon />\n    </ControlButton>\n  {/if}\n  {#if showFitView}\n    <ControlButton\n      class=\"svelte-flow__controls-fitview\"\n      onclick={onFitViewHandler}\n      title={ariaLabelConfig['controls.fitView.ariaLabel']}\n      aria-label={ariaLabelConfig['controls.fitView.ariaLabel']}\n      {...buttonProps}\n    >\n      <FitViewIcon />\n    </ControlButton>\n  {/if}\n  {#if showLock}\n    <ControlButton\n      class=\"svelte-flow__controls-interactive\"\n      onclick={onToggleInteractivity}\n      title={ariaLabelConfig['controls.interactive.ariaLabel']}\n      aria-label={ariaLabelConfig['controls.interactive.ariaLabel']}\n      {...buttonProps}\n    >\n      {#if isInteractive}<UnlockIcon />{:else}<LockIcon />{/if}\n    </ControlButton>\n  {/if}\n  {#if children}\n    {@render children()}\n  {/if}\n  {#if after}\n    {@render after()}\n  {/if}\n</Panel>\n", "export var BackgroundVariant;\n(function (BackgroundVariant) {\n    BackgroundVariant[\"Lines\"] = \"lines\";\n    BackgroundVariant[\"Dots\"] = \"dots\";\n    BackgroundVariant[\"Cross\"] = \"cross\";\n})(BackgroundVariant || (BackgroundVariant = {}));\n", "<script lang=\"ts\">\n  import type { ClassValue } from 'svelte/elements';\n\n  let { radius, class: className }: { radius: number; class?: ClassValue } = $props();\n</script>\n\n<circle\n  cx={radius}\n  cy={radius}\n  r={radius}\n  class={['svelte-flow__background-pattern', 'dots', className]}\n/>\n", "<script lang=\"ts\">\n  import type { ClassValue } from 'svelte/elements';\n  import type { BackgroundVariant } from './types';\n\n  let {\n    lineWidth,\n    dimensions,\n    variant,\n    class: className\n  }: {\n    lineWidth: number;\n    dimensions: [number, number];\n    variant: BackgroundVariant;\n    class?: ClassValue;\n  } = $props();\n</script>\n\n<path\n  stroke-width={lineWidth}\n  d={`M${dimensions[0] / 2} 0 V${dimensions[1]} M0 ${dimensions[1] / 2} H${dimensions[0]}`}\n  class={['svelte-flow__background-pattern', variant, className]}\n/>\n", "<script lang=\"ts\" module>\n  const defaultSize = {\n    [BackgroundVariant.Dots]: 1,\n    [BackgroundVariant.Lines]: 1,\n    [BackgroundVariant.Cross]: 6\n  };\n</script>\n\n<script lang=\"ts\">\n  import { useStore } from '../../store';\n  import { BackgroundVariant, type BackgroundProps } from './types';\n\n  import DotPattern from './DotPattern.svelte';\n  import LinePattern from './LinePattern.svelte';\n\n  let {\n    id,\n    variant = BackgroundVariant.Dots,\n    gap = 20,\n    size,\n    lineWidth = 1,\n    bgColor,\n    patternColor,\n    patternClass,\n    class: className\n  }: BackgroundProps = $props();\n\n  let store = $derived(useStore());\n\n  let isDots = $derived(variant === BackgroundVariant.Dots);\n  let isCross = $derived(variant === BackgroundVariant.Cross);\n  let gapXY: number[] = $derived(Array.isArray(gap) ? gap : [gap, gap]);\n\n  let patternId = $derived(`background-pattern-${store.flowId}-${id ?? ''}`);\n  let scaledGap = $derived([\n    gapXY[0] * store.viewport.zoom || 1,\n    gapXY[1] * store.viewport.zoom || 1\n  ]);\n  let scaledSize = $derived((size ?? defaultSize[variant]) * store.viewport.zoom);\n\n  let patternDimensions = $derived(\n    (isCross ? [scaledSize, scaledSize] : scaledGap) as [number, number]\n  );\n  let patternOffset = $derived(\n    isDots ? [scaledSize / 2, scaledSize / 2] : [patternDimensions[0] / 2, patternDimensions[1] / 2]\n  );\n</script>\n\n<svg\n  class={['svelte-flow__background', 'svelte-flow__container', className]}\n  data-testid=\"svelte-flow__background\"\n  style:--xy-background-color-props={bgColor}\n  style:--xy-background-pattern-color-props={patternColor}\n>\n  <pattern\n    id={patternId}\n    x={store.viewport.x % scaledGap[0]}\n    y={store.viewport.y % scaledGap[1]}\n    width={scaledGap[0]}\n    height={scaledGap[1]}\n    patternUnits=\"userSpaceOnUse\"\n    patternTransform={`translate(-${patternOffset[0]},-${patternOffset[1]})`}\n  >\n    {#if isDots}\n      <DotPattern radius={scaledSize / 2} class={patternClass} />\n    {:else}\n      <LinePattern dimensions={patternDimensions} {variant} {lineWidth} class={patternClass} />\n    {/if}\n  </pattern>\n  <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill={`url(#${patternId})`} />\n</svg>\n", "<script lang=\"ts\">\n  import type { ClassValue } from 'svelte/elements';\n\n  let {\n    x,\n    y,\n    width,\n    height,\n    borderRadius = 5,\n    color,\n    shapeRendering,\n    strokeColor,\n    strokeWidth = 2,\n    selected,\n    class: className\n  }: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    borderRadius?: number;\n    color?: string;\n    shapeRendering: string;\n    strokeColor?: string;\n    strokeWidth?: number;\n    selected?: boolean;\n    class?: ClassValue;\n  } = $props();\n</script>\n\n<rect\n  class={['svelte-flow__minimap-node', className]}\n  class:selected\n  {x}\n  {y}\n  rx={borderRadius}\n  ry={borderRadius}\n  {width}\n  {height}\n  style:fill={color}\n  style:stroke={strokeColor}\n  style:stroke-width={strokeWidth}\n  shape-rendering={shapeRendering}\n/>\n", "import { XYMinimap } from '@xyflow/system';\nexport default function interactive(domNode, params) {\n    const minimap = XYMinimap({\n        domNode,\n        panZoom: params.panZoom,\n        getTransform: () => {\n            const { viewport } = params.store;\n            return [viewport.x, viewport.y, viewport.zoom];\n        },\n        getViewScale: params.getViewScale\n    });\n    minimap.update({\n        translateExtent: params.translateExtent,\n        width: params.width,\n        height: params.height,\n        inversePan: params.inversePan,\n        zoomStep: params.zoomStep,\n        pannable: params.pannable,\n        zoomable: params.zoomable\n    });\n    function update(params) {\n        minimap.update({\n            translateExtent: params.translateExtent,\n            width: params.width,\n            height: params.height,\n            inversePan: params.inversePan,\n            zoomStep: params.zoomStep,\n            pannable: params.pannable,\n            zoomable: params.zoomable\n        });\n    }\n    return {\n        update,\n        destroy() {\n            minimap.destroy();\n        }\n    };\n}\n", "<script lang=\"ts\" module>\n  declare const window: Window | undefined;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const getAttrFunction = (func: any): GetMiniMapNodeAttribute =>\n    func instanceof Function ? func : () => func;\n</script>\n\n<script lang=\"ts\">\n  import {\n    getBoundsOfRects,\n    getInternalNodesBounds,\n    getNodeDimensions,\n    nodeHasDimensions\n  } from '@xyflow/system';\n\n  import { useStore } from '../../store';\n  import { Panel } from '../../container/Panel';\n  import MinimapNode from './MinimapNode.svelte';\n  import interactive from './interactive';\n  import type { GetMiniMapNodeAttribute, MiniMapProps } from './types';\n\n  let {\n    position = 'bottom-right',\n    ariaLabel,\n    nodeStrokeColor = 'transparent',\n    nodeColor,\n    nodeClass = '',\n    nodeBorderRadius = 5,\n    nodeStrokeWidth = 2,\n    bgColor,\n    maskColor,\n    maskStrokeColor,\n    maskStrokeWidth,\n    width = 200,\n    height = 150,\n    pannable = true,\n    zoomable = true,\n    inversePan,\n    zoomStep,\n    class: className,\n    ...rest\n  }: MiniMapProps = $props();\n\n  let store = $derived(useStore());\n  let ariaLabelConfig = $derived(store.ariaLabelConfig);\n\n  const nodeColorFunc = nodeColor === undefined ? undefined : getAttrFunction(nodeColor);\n  const nodeStrokeColorFunc = getAttrFunction(nodeStrokeColor);\n  const nodeClassFunc = getAttrFunction(nodeClass);\n  const shapeRendering =\n    // @ts-expect-error - TS doesn't know about chrome\n    typeof window === 'undefined' || !!window.chrome ? 'crispEdges' : 'geometricPrecision';\n\n  let labelledBy = $derived(`svelte-flow__minimap-desc-${store.flowId}`);\n\n  let viewBB = $derived({\n    x: -store.viewport.x / store.viewport.zoom,\n    y: -store.viewport.y / store.viewport.zoom,\n    width: store.width / store.viewport.zoom,\n    height: store.height / store.viewport.zoom\n  });\n  let boundingRect = $derived(\n    store.nodeLookup.size > 0\n      ? getBoundsOfRects(\n          getInternalNodesBounds(store.nodeLookup, { filter: (n) => !n.hidden }),\n          viewBB\n        )\n      : viewBB\n  );\n  let scaledWidth = $derived(boundingRect.width / width);\n  let scaledHeight = $derived(boundingRect.height / height);\n  let viewScale = $derived(Math.max(scaledWidth, scaledHeight));\n  let viewWidth = $derived(viewScale * width);\n  let viewHeight = $derived(viewScale * height);\n  let offset = $derived(5 * viewScale);\n  let x = $derived(boundingRect.x - (viewWidth - boundingRect.width) / 2 - offset);\n  let y = $derived(boundingRect.y - (viewHeight - boundingRect.height) / 2 - offset);\n  let viewboxWidth = $derived(viewWidth + offset * 2);\n  let viewboxHeight = $derived(viewHeight + offset * 2);\n\n  const getViewScale = () => viewScale;\n</script>\n\n<Panel\n  {position}\n  class={['svelte-flow__minimap', className]}\n  data-testid=\"svelte-flow__minimap\"\n  --xy-minimap-background-color-props={bgColor}\n  {...rest}\n>\n  {#if store.panZoom}\n    <svg\n      {width}\n      {height}\n      viewBox=\"{x} {y} {viewboxWidth} {viewboxHeight}\"\n      class=\"svelte-flow__minimap-svg\"\n      role=\"img\"\n      aria-labelledby={labelledBy}\n      style:--xy-minimap-mask-background-color-props={maskColor}\n      style:--xy-minimap-mask-stroke-color-props={maskStrokeColor}\n      style:--xy-minimap-mask-stroke-width-props={maskStrokeWidth\n        ? maskStrokeWidth * viewScale\n        : undefined}\n      use:interactive={{\n        store,\n        panZoom: store.panZoom,\n        getViewScale,\n        translateExtent: store.translateExtent,\n        width: store.width,\n        height: store.height,\n        inversePan,\n        zoomStep,\n        pannable,\n        zoomable\n      }}\n    >\n      {#if ariaLabel ?? ariaLabelConfig['minimap.ariaLabel']}\n        <title id={labelledBy}>{ariaLabel ?? ariaLabelConfig['minimap.ariaLabel']}</title>\n      {/if}\n\n      {#each store.nodes as userNode (userNode.id)}\n        {@const node = store.nodeLookup.get(userNode.id)}\n        {#if node && nodeHasDimensions(node)}\n          {@const nodeDimesions = getNodeDimensions(node)}\n          <MinimapNode\n            x={node.internals.positionAbsolute.x}\n            y={node.internals.positionAbsolute.y}\n            {...nodeDimesions}\n            selected={node.selected}\n            color={nodeColorFunc?.(node)}\n            borderRadius={nodeBorderRadius}\n            strokeColor={nodeStrokeColorFunc(node)}\n            strokeWidth={nodeStrokeWidth}\n            {shapeRendering}\n            class={nodeClassFunc(node)}\n          />\n        {/if}\n      {/each}\n      <path\n        class=\"svelte-flow__minimap-mask\"\n        d=\"M{x - offset},{y - offset}h{viewboxWidth + offset * 2}v{viewboxHeight +\n          offset * 2}h{-viewboxWidth - offset * 2}z\n      M{viewBB.x},{viewBB.y}h{viewBB.width}v{viewBB.height}h{-viewBB.width}z\"\n        fill-rule=\"evenodd\"\n        pointer-events=\"none\"\n      />\n    </svg>\n  {/if}\n</Panel>\n", "<script lang=\"ts\">\n  import { getContext } from 'svelte';\n  import { Position, getNodeToolbarTransform } from '@xyflow/system';\n\n  import { hideOnSSR, portal } from '../../actions/portal';\n  import { useStore } from '../../store';\n  import { useSvelteFlow } from '../../hooks/useSvelteFlow.svelte';\n\n  import type { InternalNode } from '../../types';\n  import type { NodeToolbarProps } from './types';\n\n  let {\n    nodeId,\n    position = Position.Top,\n    align = 'center',\n    offset = 10,\n    isVisible,\n    children,\n    ...rest\n  }: NodeToolbarProps = $props();\n\n  const store = useStore();\n\n  const { getNodesBounds } = useSvelteFlow();\n  const contextNodeId = getContext<string>('svelteflow__node_id');\n\n  let toolbarNodes: InternalNode[] = $derived.by(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n    store.nodes;\n    const nodeIds = Array.isArray(nodeId) ? nodeId : [nodeId ?? contextNodeId];\n\n    return nodeIds.reduce<InternalNode[]>((res, nodeId) => {\n      const node = store.nodeLookup.get(nodeId);\n\n      if (node) {\n        res.push(node);\n      }\n\n      return res;\n    }, []);\n  });\n\n  let transform: string = $derived.by(() => {\n    const nodeRect = getNodesBounds(toolbarNodes);\n    if (nodeRect) {\n      return getNodeToolbarTransform(nodeRect, store.viewport, position, offset, align);\n    }\n    return '';\n  });\n\n  let zIndex = $derived(\n    toolbarNodes.length === 0\n      ? 1\n      : Math.max(...toolbarNodes.map((node) => (node.internals.z || 5) + 1))\n  );\n\n  //FIXME: Possible performance bottleneck\n  let selectedNodesCount = $derived(store.nodes.filter((node) => node.selected).length);\n\n  // if isVisible is not set, we show the toolbar only if its node is selected and no other node is selected\n  let isActive = $derived(\n    typeof isVisible === 'boolean'\n      ? isVisible\n      : toolbarNodes.length === 1 && toolbarNodes[0].selected && selectedNodesCount === 1\n  );\n</script>\n\n{#if store.domNode && isActive && toolbarNodes}\n  <div\n    use:portal={'root'}\n    style:display={hideOnSSR().value ? 'none' : undefined}\n    class=\"svelte-flow__node-toolbar\"\n    data-id={toolbarNodes.reduce((acc, node) => `${acc}${node.id} `, '').trim()}\n    style:position=\"absolute\"\n    style:transform\n    style:z-index={zIndex}\n    {...rest}\n  >\n    {@render children?.()}\n  </div>\n{/if}\n", "<script lang=\"ts\">\n  import { getContext, onMount } from 'svelte';\n  import { useStore } from '../../store';\n  import {\n    XYResizer,\n    ResizeControlVariant,\n    type ControlPosition,\n    type XYResizerInstance,\n    type XYResizerChange,\n    type XYResizerChildChange\n  } from '@xyflow/system';\n  import type { ResizeControlProps } from './types';\n  import type { Node } from '../../types';\n\n  let {\n    nodeId,\n    position,\n    variant = ResizeControlVariant.Handle,\n    color,\n    minWidth = 10,\n    minHeight = 10,\n    maxWidth = Number.MAX_VALUE,\n    maxHeight = Number.MAX_VALUE,\n    keepAspectRatio = false,\n    autoScale = true,\n    shouldResize,\n    onResizeStart,\n    onResize,\n    onResizeEnd,\n    class: className,\n    children,\n    ...rest\n  }: ResizeControlProps = $props();\n\n  const store = useStore();\n\n  let id = $derived(\n    typeof nodeId === 'string' ? nodeId : getContext<string>('svelteflow__node_id')\n  );\n\n  let resizeControlRef: HTMLDivElement;\n  let resizer: XYResizerInstance | null = $state(null);\n\n  let isLineVariant = $derived(variant === ResizeControlVariant.Line);\n\n  let controlPosition = $derived.by(() => {\n    let defaultPosition = (isLineVariant ? 'right' : 'bottom-right') as ControlPosition;\n    return position ?? defaultPosition;\n  });\n\n  let positionClasses = $derived(controlPosition.split('-'));\n\n  onMount(() => {\n    if (resizeControlRef) {\n      resizer = XYResizer({\n        domNode: resizeControlRef,\n        nodeId: id,\n        getStoreItems: () => {\n          return {\n            nodeLookup: store.nodeLookup,\n            transform: [store.viewport.x, store.viewport.y, store.viewport.zoom],\n            snapGrid: store.snapGrid ?? undefined,\n            snapToGrid: !!store.snapGrid,\n            nodeOrigin: store.nodeOrigin,\n            paneDomNode: store.domNode\n          };\n        },\n        onChange: (change: XYResizerChange, childChanges: XYResizerChildChange[]) => {\n          const changes = new Map<string, Partial<Node>>();\n          let position = change.x && change.y ? { x: change.x, y: change.y } : undefined;\n          changes.set(id, { ...change, position });\n\n          for (const childChange of childChanges) {\n            changes.set(childChange.id, {\n              position: childChange.position\n            });\n          }\n\n          store.nodes = store.nodes.map((node) => {\n            const change = changes.get(node.id);\n            if (change) {\n              return {\n                ...node,\n                position: {\n                  x: change.position?.x ?? node.position.x,\n                  y: change.position?.y ?? node.position.y\n                },\n                width: change.width ?? node.width,\n                height: change.height ?? node.height\n              };\n            }\n            return node;\n          });\n        }\n      });\n    }\n    return () => {\n      resizer?.destroy();\n    };\n  });\n\n  $effect.pre(() => {\n    resizer?.update({\n      controlPosition,\n      boundaries: {\n        minWidth,\n        minHeight,\n        maxWidth,\n        maxHeight\n      },\n      keepAspectRatio: !!keepAspectRatio,\n      onResizeStart,\n      onResize,\n      onResizeEnd,\n      shouldResize\n    });\n  });\n</script>\n\n<div\n  class={['svelte-flow__resize-control', store.noDragClass, ...positionClasses, variant, className]}\n  bind:this={resizeControlRef}\n  style:border-color={isLineVariant ? color : undefined}\n  style:background-color={isLineVariant ? undefined : color}\n  style:scale={isLineVariant || !autoScale ? undefined : Math.max(1 / store.viewport.zoom, 1)}\n  {...rest}\n>\n  {@render children?.()}\n</div>\n", "<script lang=\"ts\">\n  import ResizeControl from './ResizeControl.svelte';\n  import type { NodeResizerProps } from './types';\n  import {\n    ResizeControlVariant,\n    XY_RESIZER_HANDLE_POSITIONS,\n    XY_RESIZER_LINE_POSITIONS\n  } from '@xyflow/system';\n\n  let {\n    isVisible = true,\n    nodeId,\n    handleClass,\n    handleStyle,\n    lineClass,\n    lineStyle,\n    autoScale = true,\n    ...rest\n  }: NodeResizerProps = $props();\n</script>\n\n{#if isVisible}\n  {#each XY_RESIZER_LINE_POSITIONS as position (position)}\n    <ResizeControl\n      class={lineClass}\n      style={lineStyle}\n      {nodeId}\n      {position}\n      {autoScale}\n      variant={ResizeControlVariant.Line}\n      {...rest}\n    />\n  {/each}\n  {#each XY_RESIZER_HANDLE_POSITIONS as position (position)}\n    <ResizeControl\n      class={handleClass}\n      style={handleStyle}\n      {nodeId}\n      {position}\n      {autoScale}\n      {...rest}\n    />\n  {/each}\n{/if}\n", "import { useStore } from '../store';\nimport { getContext } from 'svelte';\n/**\n * When you programmatically add or remove handles to a node or update a node's\n * handle position, you need to let Svelte Flow know about it using this hook. This\n * will update the internal dimensions of the node and properly reposition handles\n * on the canvas if necessary.\n *\n * @public\n * @returns A function for telling Svelte Flow to update the internal state of one or more nodes\n * that you have changed programmatically.\n */\nexport function useUpdateNodeInternals() {\n    const { domNode, updateNodeInternals } = $derived(useStore());\n    const nodeId = getContext('svelteflow__node_id');\n    // @todo: do we want to add this to system?\n    const updateInternals = (id) => {\n        if (!id && !nodeId) {\n            throw new Error('When using outside of a node, you must provide an id.');\n        }\n        const updateIds = id ? (Array.isArray(id) ? id : [id]) : [nodeId];\n        const updates = new Map();\n        updateIds.forEach((updateId) => {\n            const nodeElement = domNode?.querySelector(`.svelte-flow__node[data-id=\"${updateId}\"]`);\n            if (nodeElement) {\n                updates.set(updateId, { id: updateId, nodeElement, force: true });\n            }\n        });\n        requestAnimationFrame(() => updateNodeInternals(updates));\n    };\n    return updateInternals;\n}\n", "import { useStore } from '../store';\n/**\n * Hook for receiving the current connection.\n *\n * @public\n * @returns Current connection as a signal\n */\nexport function useConnection() {\n    const { connection } = $derived(useStore());\n    return {\n        get current() {\n            return connection;\n        }\n    };\n}\n", "import { useStore } from '../store';\n/**\n * Hook for getting the current nodes from the store.\n *\n * @public\n * @returns A reactive signal of the current nodes\n */\nexport function useNodes() {\n    const store = $derived(useStore());\n    return {\n        get current() {\n            return store.nodes;\n        },\n        set current(nodes) {\n            store.nodes = nodes;\n        },\n        update(updateFn) {\n            store.nodes = updateFn(store.nodes);\n        },\n        set(nodes) {\n            store.nodes = nodes;\n        }\n    };\n}\n/**\n * Hook for getting the current edges from the store.\n *\n * @public\n * @returns A reactive signal of the current edges\n */\nexport function useEdges() {\n    const store = $derived(useStore());\n    return {\n        get current() {\n            return store.edges;\n        },\n        set current(edges) {\n            store.edges = edges;\n        },\n        update(updateFn) {\n            store.edges = updateFn(store.edges);\n        },\n        set(edges) {\n            store.edges = edges;\n        }\n    };\n}\n/**\n * Hook for getting the current viewport from the store.\n *\n * @public\n * @returns A reactive signal of the current viewport\n */\nexport function useViewport() {\n    const store = $derived(useStore());\n    return {\n        get current() {\n            return store.viewport;\n        },\n        set current(viewport) {\n            store.viewport = viewport;\n        },\n        update(updateFn) {\n            store.viewport = updateFn(store.viewport);\n        },\n        set(viewport) {\n            store.viewport = viewport;\n        }\n    };\n}\n", "import { areConnectionMapsEqual, handleConnectionChange } from '@xyflow/system';\nimport { useStore } from '../store';\nimport { getContext } from 'svelte';\nconst initialConnections = [];\n/**\n * Hook to retrieve all edges connected to a node. Can be filtered by handle type and id.\n *\n * @public\n * @param param.id - node id - optional if called inside a custom node\n * @param param.handleType - filter by handle type 'source' or 'target'\n * @param param.handleId - filter by handle id (this is only needed if the node has multiple handles of the same type)\n * @param param.onConnect - gets called when a connection is established\n * @param param.onDisconnect - gets called when a connection is removed\n * @returns An array with connections\n */\nexport function useNodeConnections({ id, handleType, handleId, onConnect, onDisconnect } = {}) {\n    const { edges, connectionLookup } = $derived(useStore());\n    const contextNodeId = getContext('svelteflow__node_id');\n    const nodeId = id ?? contextNodeId;\n    let prevConnections = new Map();\n    let connectionsArray = initialConnections;\n    const connections = $derived.by(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        edges;\n        const nextConnections = connectionLookup.get(`${nodeId}${handleType ? (handleId ? `-${handleType}-${handleId}` : `-${handleType}`) : ''}`) ?? new Map();\n        if (!areConnectionMapsEqual(nextConnections, prevConnections)) {\n            if (onConnect)\n                handleConnectionChange(nextConnections, prevConnections, onConnect);\n            if (onDisconnect)\n                handleConnectionChange(prevConnections, nextConnections, onDisconnect);\n            prevConnections = nextConnections;\n            connectionsArray = Array.from(nextConnections.values() || initialConnections);\n        }\n        return connectionsArray;\n    });\n    return {\n        get current() {\n            return connections;\n        }\n    };\n}\n", "import { shallowNodeData } from '@xyflow/system';\nimport { useStore } from '../store';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useNodesData(nodeIds) {\n    const { nodes, nodeLookup } = $derived(useStore());\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let prevNodesData = [];\n    let initialRun = true;\n    const nodeData = $derived.by(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        nodes;\n        const nextNodesData = [];\n        const isArrayOfIds = Array.isArray(nodeIds);\n        const _nodeIds = isArrayOfIds ? nodeIds : [nodeIds];\n        for (const nodeId of _nodeIds) {\n            const node = nodeLookup.get(nodeId)?.internals.userNode;\n            if (node) {\n                nextNodesData.push({\n                    id: node.id,\n                    type: node.type,\n                    data: node.data\n                });\n            }\n        }\n        if (!shallowNodeData(nextNodesData, prevNodesData) || initialRun) {\n            prevNodesData = nextNodesData;\n            initialRun = false;\n        }\n        return isArrayOfIds ? prevNodesData : (prevNodesData[0] ?? null);\n    });\n    return {\n        get current() {\n            return nodeData;\n        }\n    };\n}\n", "import { useStore } from '../store';\n/**\n * Hook to get an internal node by id.\n *\n * @public\n * @param id - the node id\n * @returns An internal node or undefined\n */\nexport function useInternalNode(id) {\n    const { nodeLookup, nodes } = $derived(useStore());\n    const node = $derived.by(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        nodes;\n        return nodeLookup.get(id);\n    });\n    return {\n        get current() {\n            return node;\n        }\n    };\n}\n", "import { useStore } from '../store';\n/**\n * Hook for seeing if nodes are initialized\n * @returns A boolean that indicates if nodes are initialized\n * @public\n */\nexport function useNodesInitialized() {\n    const { nodesInitialized } = $derived(useStore());\n    return {\n        get current() {\n            return nodesInitialized;\n        }\n    };\n}\n/**\n * Hook for seeing if the viewport is initialized\n * @returns - reactive viewportInitialized\n */\nexport function useViewportInitialized() {\n    const { viewportInitialized } = $derived(useStore());\n    return {\n        get current() {\n            return viewportInitialized;\n        }\n    };\n}\n", "import { useStore } from './useStore';\nexport function useOnSelectionChange(onselectionchange) {\n    const store = $derived(useStore());\n    const symbol = Symbol();\n    $effect(() => {\n        store.selectionChangeHandlers.set(symbol, onselectionchange);\n        return () => {\n            store.selectionChangeHandlers.delete(symbol);\n        };\n    });\n}\n"],
  "mappings": "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",
  "names": ["connectingFrom", "connectingTo", "isPossibleTargetHandle", "valid", "event", "onclick", "target", "addEdge", "updateNodeInternals", "panBy", "reset", "params", "event", "domNode", "params", "id", "event", "width", "height", "$$anchor", "onclick", "event", "$$anchor", "$$anchor", "event", "event", "trigger", "key", "zoom", "node", "key", "path", "event", "panBy", "root", "root", "root", "root", "root", "interactive", "BackgroundVariant", "params", "$$anchor", "getNodesBounds", "change", "$$anchor", "updateNodeInternals"]
}
