import type { Edge, Node } from '../../types';
import type { HTMLAttributes } from 'svelte/elements';
import { ConnectionLineType, PanOnScrollMode } from '@xyflow/system';
declare class __sveltets_Render<NodeType extends Node = Node, EdgeType extends Edge = Edge> {
    props(): import("../../types").NodeEvents<NodeType> & import("../../types").NodeSelectionEvents<NodeType> & import("../../types").EdgeEvents<EdgeType> & import("../../types").PaneEvents & {
        id?: string;
        width?: number;
        height?: number;
        nodes?: NodeType[] | undefined;
        edges?: EdgeType[] | undefined;
        nodeTypes?: import("../../types").NodeTypes;
        edgeTypes?: import("../../types").EdgeTypes;
        selectionKey?: import("../../types").KeyDefinition | import("../../types").KeyDefinition[] | null;
        panActivationKey?: import("../../types").KeyDefinition | import("../../types").KeyDefinition[] | null;
        deleteKey?: import("../../types").KeyDefinition | import("../../types").KeyDefinition[] | null;
        multiSelectionKey?: import("../../types").KeyDefinition | import("../../types").KeyDefinition[] | null;
        zoomActivationKey?: import("../../types").KeyDefinition | import("../../types").KeyDefinition[] | null;
        fitView?: boolean;
        fitViewOptions?: import("../../types").FitViewOptions<NodeType> | undefined;
        nodeOrigin?: import("@xyflow/system").NodeOrigin;
        nodeDragThreshold?: number;
        paneClickDistance?: number;
        nodeClickDistance?: number;
        minZoom?: number;
        maxZoom?: number;
        initialViewport?: import("@xyflow/system").Viewport;
        viewport?: import("@xyflow/system").Viewport;
        connectionRadius?: number;
        connectionMode?: import("@xyflow/system").ConnectionMode;
        connectionLineComponent?: import("svelte").Component;
        connectionLineStyle?: string;
        connectionLineContainerStyle?: string;
        selectionMode?: import("@xyflow/system").SelectionMode;
        selectNodesOnDrag?: boolean;
        snapGrid?: import("@xyflow/system").SnapGrid;
        defaultMarkerColor?: string;
        nodesDraggable?: boolean;
        autoPanOnNodeFocus?: boolean;
        nodesConnectable?: boolean;
        elementsSelectable?: boolean;
        nodesFocusable?: boolean;
        edgesFocusable?: boolean;
        translateExtent?: import("@xyflow/system").CoordinateExtent;
        nodeExtent?: import("@xyflow/system").CoordinateExtent;
        preventScrolling?: boolean;
        zoomOnScroll?: boolean;
        zoomOnDoubleClick?: boolean;
        zoomOnPinch?: boolean;
        panOnScroll?: boolean;
        panOnScrollMode?: PanOnScrollMode;
        panOnDrag?: boolean | number[];
        selectionOnDrag?: boolean;
        onlyRenderVisibleElements?: boolean;
        autoPanOnConnect?: boolean;
        autoPanOnNodeDrag?: boolean;
        defaultEdgeOptions?: import("../../types").DefaultEdgeOptions;
        colorMode?: import("@xyflow/system").ColorMode;
        colorModeSSR?: Omit<import("@xyflow/system").ColorMode, "system">;
        class?: import("svelte/elements").ClassValue;
        style?: string;
        connectionLineType?: ConnectionLineType;
        elevateNodesOnSelect?: boolean;
        elevateEdgesOnSelect?: boolean;
        disableKeyboardA11y?: boolean;
        noDragClass?: string;
        noWheelClass?: string;
        noPanClass?: string;
        clickConnect?: boolean;
        attributionPosition?: import("@xyflow/system").PanelPosition;
        proOptions?: import("@xyflow/system").ProOptions;
        isValidConnection?: import("../../types").IsValidConnection;
        onmovestart?: import("@xyflow/system").OnMoveStart;
        onmove?: import("@xyflow/system").OnMove;
        onmoveend?: import("@xyflow/system").OnMoveEnd;
        onflowerror?: import("@xyflow/system").OnError;
        ondelete?: import("../../types").OnDelete<NodeType, EdgeType> | undefined;
        onbeforedelete?: import("../../types").OnBeforeDelete<NodeType, EdgeType> | undefined;
        onbeforeconnect?: import("../../types").OnBeforeConnect<EdgeType> | undefined;
        onconnect?: import("@xyflow/system").OnConnect;
        onconnectstart?: import("@xyflow/system").OnConnectStart;
        onconnectend?: import("@xyflow/system").OnConnectEnd;
        onreconnect?: import("@xyflow/system").OnReconnect<EdgeType> | undefined;
        onreconnectstart?: import("@xyflow/system").OnReconnectStart<EdgeType> | undefined;
        onreconnectend?: import("@xyflow/system").OnReconnectEnd<EdgeType> | undefined;
        onbeforereconnect?: import("../../types").OnBeforeReconnect<EdgeType> | undefined;
        onclickconnectstart?: import("@xyflow/system").OnConnectStart;
        onclickconnectend?: import("@xyflow/system").OnConnectEnd;
        oninit?: () => void;
        onselectionchange?: import("../../types").OnSelectionChange<NodeType, EdgeType> | undefined;
        onselectiondragstart?: import("../../types").OnSelectionDrag<NodeType> | undefined;
        onselectiondrag?: import("../../types").OnSelectionDrag<NodeType> | undefined;
        onselectiondragstop?: import("../../types").OnSelectionDrag<NodeType> | undefined;
        onselectionstart?: (event: PointerEvent) => void;
        onselectionend?: (event: PointerEvent) => void;
        ariaLabelConfig?: Partial<import("@xyflow/system").AriaLabelConfig>;
    } & Omit<HTMLAttributes<HTMLDivElement>, "onselectionchange">;
    events(): {};
    slots(): {};
    bindings(): "nodes" | "edges" | "viewport";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <NodeType extends Node = Node, EdgeType extends Edge = Edge>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<NodeType, EdgeType>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<NodeType, EdgeType>['props']>, ReturnType<__sveltets_Render<NodeType, EdgeType>['events']>, ReturnType<__sveltets_Render<NodeType, EdgeType>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<NodeType, EdgeType>['bindings']>;
    } & ReturnType<__sveltets_Render<NodeType, EdgeType>['exports']>;
    <NodeType extends Node = Node, EdgeType extends Edge = Edge>(internal: unknown, props: ReturnType<__sveltets_Render<NodeType, EdgeType>['props']> & {}): ReturnType<__sveltets_Render<NodeType, EdgeType>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any, any>['bindings']>;
}
declare const SvelteFlow: $$IsomorphicComponent;
type SvelteFlow<NodeType extends Node = Node, EdgeType extends Edge = Edge> = InstanceType<typeof SvelteFlow<NodeType, EdgeType>>;
export default SvelteFlow;
