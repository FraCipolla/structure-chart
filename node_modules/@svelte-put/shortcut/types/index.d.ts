declare module '@svelte-put/shortcut' {
	import type { ActionReturn, Action } from 'svelte/action';
	/**
	 * Listen for keyboard event and trigger `shortcut` {@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent | CustomEvent }
	 * @example Typical usage
	 *
	 * ```svelte
	 * <script lang="ts">
	 *  import { shortcut, type ShortcutEventDetail } from '@svelte-put/shortcut';
	 *
	 *  let commandPalette = false;
	 *
	 *  function onOpenCommandPalette() {
	 *    commandPalette = true;
	 *  }
	 *  function onCloseCommandPalette() {
	 *    commandPalette = false;
	 *  }
	 *
	 *  function doSomethingElse(details: ShortcutEventDetail) {
	 *    console.log('Action was placed on:', details.node);
	 *    console.log('Trigger:', details.trigger);
	 *  }
	 *
	 *  function onShortcut(event: CustomEvent<ShortcutEventDetail>) {
	 *    if (event.detail.trigger.id === 'do-something-else') {
	 *      console.log('Same as doSomethingElse()');
	 *      // be careful here doSomethingElse would have been called too
	 *   }
	 * }
	 * </script>
	 *
	 * <svelte:window
	 *   use:shortcut={{
	 *     trigger: [
	 *       {
	 *         key: 'k',
	 *
	 *         // trigger if either ctrl or meta is pressed
	 *         modifier: ['ctrl', 'meta'],
	 *
	 *         callback: onOpenCommandPalette,
	 *         preventDefault: true,
	 *       },
	 *       {
	 *         key: 'Escape',
	 *         modifier: false, // or any falsy value other than undefined to means 'expect no modifier'
	 *
	 *         // preferably avoid arrow functions here for better performance
	 *         // with arrow functions the action has to be updated more frequently
	 *         callback: onCloseCommandPalette,
	 *
	 *         enabled: commandPalette,
	 *         preventDefault: true,
	 *       },
	 *      {
	 *         key: 'k',
	 *
	 *         // trigger if both ctrl & shift are pressed
	 *         modifier: [['ctrl', 'shift']],
	 *         id: 'do-something-else',
	 *         callback: doSomethingElse,
	 *      },
	 *     ],
	 *   }}
	 *   onshortcut={onShortcut}
	 * />
	 * ```
	 * You can either:
	 *
	 * - pass multiple callbacks to their associated triggers, or
	 *
	 * - pass one single handler to the `onshortcut` event, in which case you should
	 * provide an ID to each trigger to be able to distinguish what trigger was activated
	 * in the event handler.
	 *
	 * Either way, only use `callback` or `onshortcut` and not both to
	 * avoid handler duplication.
	 * @param node - HTMLElement to add event listener to
	 * @param param - svelte action parameters
	 * */
	export function shortcut(node: HTMLElement, param: ShortcutParameter): ShortcutActionReturn;
	/**
	 * Additional attributes extended from `svelte-put/shortcut`
	 *
	 * The ambient types for these extended attributes should be available automatically
	 * whenever `svelte-put/shorcut` is imported.
	 */
	export interface ShortcutAttributes {
		onshortcut?: (event: CustomEvent<ShortcutEventDetail>) => void;
	}

	/**
	 * Supported modifier keys, map to {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent | KeyboardEvent}'s
	 * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/altKey | altkey},
	 * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/ctrlKey | ctrlKey},
	 * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/shiftKey | shiftKey},
	 * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/metaKey | metaKey}.
	 */
	export type ShortcutModifier = 'alt' | 'ctrl' | 'meta' | 'shift';

	/**
	 * Possible variations for modifier definition
	 *
	 * @example
	 *
	 * Listen for key (catch-all, modifier or not)
	 *
	 * ```svelte
	 * <script>
	 *  import { shortcut } from '@svelte-put/shortcut';
	 * </script>
	 *
	 * <window use:shortcut={{
	 *   trigger: {
	 *    key: 'k',
	 *   },
	 * }}
	 * />
	 * ```
	 *
	 * @example
	 *
	 * Listen for key with no modifier
	 *
	 * ```svelte
	 * <script>
	 *  import { shortcut } from '@svelte-put/shortcut';
	 * </script>
	 *
	 * <window use:shortcut={{
	 *   trigger: {
	 *    key: 'k',
	 *    modifier: false,  // only trigger when no modifier is pressed
	 *   },
	 * }}
	 * />
	 * ```
	 *
	 * @example
	 *
	 * Listen for key with a single modifier
	 *
	 * ```svelte
	 * <script>
	 *  import { shortcut } from '@svelte-put/shortcut';
	 * </script>
	 *
	 * <window use:shortcut={{
	 *   trigger: {
	 *    key: 'k',
	 *    modifier: 'ctrl',
	 *   },
	 * }}
	 * />
	 * ```
	 *
	 * @example
	 *
	 * Listen for key with one of many modifiers (or)
	 *
	 * ```svelte
	 * <script>
	 *  import { shortcut } from '@svelte-put/shortcut';
	 * </script>
	 *
	 * <window use:shortcut={{
	 *   trigger: {
	 *    key: 'k',
	 *    modifier: ['ctrl', 'meta'],
	 *   },
	 * }}
	 * />
	 * ```
	 *
	 * @example
	 *
	 * Listen for key with a combination of multiple modifiers (and)
	 *
	 * ```svelte
	 * <script>
	 *  import { shortcut } from '@svelte-put/shortcut';
	 * </script>
	 *
	 * <window use:shortcut={{
	 *   trigger: {
	 *    key: 'k',
	 *    modifier: [['ctrl', 'shift']],
	 *   },
	 * }}
	 * />
	 * ```
	 *
	 * @example
	 *
	 * A mix of the 3 previous examples
	 *
	 * ```svelte
	 * <script>
	 *  import { shortcut } from '@svelte-put/shortcut';
	 * </script>
	 *
	 * <window use:shortcut={{
	 *   trigger: {
	 *    key: 'k',
	 *    modifier: [
	 *      ['ctrl', 'shift'], // ctrl and shift
	 *                         // or
	 *      ['meta'],          // meta
	 *    ],
	 *   },
	 * }}
	 * />
	 * ```
	 */
	export type ShortcutModifierDefinition =
		| null // none
		| false // none
		| ShortcutModifier // one
		| (ShortcutModifier|ShortcutModifier[])[] // all of (AND);

	/**
	 * A definition of a shortcut trigger
	 */
	export interface ShortcutTrigger {
		/**
		 * whether to enable this triggered. Default to `true`
		 *
		 * `false` means trigger is disabled,
		 *  but event listener is still placed on node
		 */
		enabled?: boolean;
		/** modifier key to listen to in conjunction of `key`, defaults to `undefined` (catch-all) */
		modifier?: ShortcutModifierDefinition;
		/** id to distinguish this trigger from others, recommended when using `onshortcut` */
		id?: string;
		/** the {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent | KeyboardEvent}.key to listen to */
		key: string;
		/** callback for when the trigger is matched */
		callback?: (detail: ShortcutEventDetail) => void;
		/**
		 * whether to call `event.preventDefault` before firing callback. Default to `false`
		 *
		 * This is called on the node the action is attached to, not the node that triggers the original `KeyboardEvent`.
		 * So for example, if `shortcut` is attached to `window`, by the time `preventDefault` is called, the event has already been
		 * bubbled up to `window`.
		 */
		preventDefault?: boolean;
	}

	/** svelte action parameter to config behavior of `shortcut` */
	export interface ShortcutParameter {
		/** whether to activate the action. Default to `true` */
		enabled?: boolean;
		/** Either a single {@link ShortcutTrigger} definition or an array of multiple ones */
		trigger: Array<ShortcutTrigger> | ShortcutTrigger;
		/** event type to place on node. Default to `keydown` */
		type?: 'keydown' | 'keyup';
	}

	/**
	 * `detail` payload for 'shortcut' {@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent | CustomEvent }
	 * @example
	 *
	 * ```html
	 * <script>
	 *  import { shortcut, type ShortcutEventDetail } from '@svelte-put/shortcut';
	 *
	 *  function onShortcut(event: CustomEvent<ShortcutEventDetail>) {
	 *    if (event.detail.trigger.id === 'my-shortcut') {
	 *      console.log('do something');
	 *    }
	 *  }
	 * <script/>
	 *
	 * <window
	 *  use:shortcut={{
	 *    trigger: {
	 *      key: 'k ,
	 *      modifier: ['ctrl'],
	 *      id: 'my-shortcut',
	 *    },
	 *  }}
	 *  onshortcut={onShortcut}
	 * />
	 * ```
	 */
	export interface ShortcutEventDetail {
		/** the node that the action was placed on */
		node: HTMLElement;
		/** the shortcut trigger of this event */
		trigger: ShortcutTrigger;
		/** the original `KeyboardEvent`. Helpful to access the event target, for example */
		originalEvent: KeyboardEvent;
	}
	export type ShortcutAction = Action<HTMLElement, ShortcutParameter, ShortcutAttributes>;
	export type ShortcutActionReturn = ActionReturn<ShortcutParameter, ShortcutAttributes>;

	export {};
}

//# sourceMappingURL=index.d.ts.map